<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Lipowsky.LIN.Devices</name>
    </assembly>
    <members>
        <member name="T:de.lipowsky.LIN.Devices.BabyLin">
            <summary>
            The BabyLIN DLL provide functions to read / and write the BabyLIN
            </summary>
        </member>
        <member name="F:de.lipowsky.LIN.Devices.BabyLin.BL_OK">
            <summary>
            Function successfully completed.
            </summary>
        </member>
        <member name="F:de.lipowsky.LIN.Devices.BabyLin.BL_PC_SIDE_ERRORS">
            <summary>
            Limit for separating BabyLIN- and PC-side errors; below there are all PC-side ones.
            </summary>
        </member>
        <member name="F:de.lipowsky.LIN.Devices.BabyLin.BL_RESOURCE_ERROR">
            <summary>
            Internal resource allocation problem. Maybe out of memory/handles/etc.
            </summary>
        </member>
        <member name="F:de.lipowsky.LIN.Devices.BabyLin.BL_HANDLE_INVALID">
            <summary>
            Specified handle invalid.
            </summary>
        </member>
        <member name="F:de.lipowsky.LIN.Devices.BabyLin.BL_NO_CONNECTION">
            <summary>
            There is no connection open.
            </summary>
        </member>
        <member name="F:de.lipowsky.LIN.Devices.BabyLin.BL_SERIAL_PORT_ERROR">
            <summary>
            Serial port couldn't be opened or closed.
            </summary>
        </member>
        <member name="F:de.lipowsky.LIN.Devices.BabyLin.BL_CMD_SYNTAX_ERROR">
            <summary>
            BabyLIN command syntax error.
            </summary>
        </member>
        <member name="F:de.lipowsky.LIN.Devices.BabyLin.BL_NO_ANSWER">
            <summary>
            BabyLIN doesn't answer within timeout.
            </summary>
        </member>
        <member name="F:de.lipowsky.LIN.Devices.BabyLin.BL_FILE_ERROR">
            <summary>
            Unable to open a file.
            </summary>
        </member>
        <member name="F:de.lipowsky.LIN.Devices.BabyLin.BL_WRONG_PARAMETER">
            <summary>
            Wrong parameter given to function.
            </summary>
        </member>
        <member name="F:de.lipowsky.LIN.Devices.BabyLin.BL_NO_DATA">
            <summary>
            No data available upon request.
            </summary>
        </member>
        <member name="F:de.lipowsky.LIN.Devices.BabyLin.BL_NO_SDF">
            <summary>
            No SDF was loaded previously
            </summary>
        </member>
        <member name="F:de.lipowsky.LIN.Devices.BabyLin.BL_DP_MSG_ERROR">
            <summary>
            Internal message format error
            </summary>
        </member>
        <member name="F:de.lipowsky.LIN.Devices.BabyLin.BL_SIGNAL_NOT_EXISTENT">
            <summary>
            The given signal_nr or name does not exist in loaded SDF
            </summary>
        </member>
        <member name="F:de.lipowsky.LIN.Devices.BabyLin.BL_SIGNAL_IS_SCALAR">
            <summary>
            The signal chosen is a scalar, but an array function was called
            </summary>
        </member>
        <member name="F:de.lipowsky.LIN.Devices.BabyLin.BL_SIGNAL_IS_ARRAY">
            <summary>
            The signal chosen is an array, but an scalar function was called
            </summary>
        </member>
        <member name="F:de.lipowsky.LIN.Devices.BabyLin.BL_SDF_INSUFFICIENT_FIRMWARE">
            <summary>
            The SDF is unsupported by connected Baby-LIN
            </summary>
        </member>
        <member name="F:de.lipowsky.LIN.Devices.BabyLin.BL_ENCODING_NOT_EXISTENT">
            <summary>
            The given signal has no encoding
            </summary>
        </member>
        <member name="F:de.lipowsky.LIN.Devices.BabyLin.BL_BUFFER_TOO_SMALL">
            <summary>
            The given buffer is too small
            </summary>
        </member>
        <member name="F:de.lipowsky.LIN.Devices.BabyLin.BL_NO_ANSWER_DATA">
            <summary>
            There is no additional answer data present from last sendCommand-call
            </summary>
        </member>
        <member name="F:de.lipowsky.LIN.Devices.BabyLin.BL_ANSWER_DATA_NOT_EXISTENT">
            <summary>
            Additional data with given index/name not present
            </summary>
        </member>
        <member name="F:de.lipowsky.LIN.Devices.BabyLin.BL_NO_CHANNELS_AVAILABLE">
            <summary>
            The device does not support channels
            </summary>
        </member>
        <member name="F:de.lipowsky.LIN.Devices.BabyLin.BL_UNKNOWN_COMMAND">
            <summary>
            An unknown command was passed to sendCommand
            </summary>
        </member>
        <member name="F:de.lipowsky.LIN.Devices.BabyLin.BL_TIMEOUT">
            <summary>
            A sendCommand message timed out
            </summary>
        </member>
        <member name="F:de.lipowsky.LIN.Devices.BabyLin.BL_DOT_NET_WRAPPER_ERROR">
            <summary>
            An error specific to the .net Wrapper DLL
            </summary>
        </member>
        <member name="F:de.lipowsky.LIN.Devices.BabyLin.BL_V1_CHECKSUM_OK">
            <summary>
            BL_frame_t flag: LIN version 1.x frame found and checksum verified ok. (To test: if(frame.flags &amp; BL_V1_CHECKSUM_OK) { ... }; )
            </summary>
        </member>
        <member name="F:de.lipowsky.LIN.Devices.BabyLin.BL_V2_CHECKSUM_OK">
            <summary>
            BL_frame_t flag: LIN version 2.0 frame found and checksum verified ok. (To test: if(frame.flags &amp; BL_V2_CHECKSUM_OK) { ... }; )
            </summary>
        </member>
        <member name="F:de.lipowsky.LIN.Devices.BabyLin.BL_NO_CHECKSUM">
            <summary>
            BL_frame_t flag: frame without checksum; but still ok (i.e. unresponded Slave Response).
            </summary>
        </member>
        <member name="F:de.lipowsky.LIN.Devices.BabyLin.BL_FRAME_ERROR">
            <summary>
            BL_frame_t flag: erroneous frame.
            </summary>
        </member>
        <member name="F:de.lipowsky.LIN.Devices.BabyLin.BL_FRAME_SLAVERESP">
            <summary>
            BL_frame_t flag: frame is SlaveResp as answer to BL_sendRawMasterReq()
            </summary>
        </member>
        <member name="F:de.lipowsky.LIN.Devices.BabyLin.BL_EVENT_TRIGGERED_FRAME">
            <summary>
            BL_frame_t flag: frame is an event triggered frame
            </summary>
        </member>
        <member name="M:de.lipowsky.LIN.Devices.BabyLin.BL_searchBabyLIN(System.Int32)">
            <summary>
            Searches the first COM port on which any BabyLIN is connected
            The function tries to open COM port and to start communication with the device.
            If not any BabyLIN found then the function returns 0
            </summary>
            <param name="port">Highest COM port number to test.</param>
            <returns>COM Port on which the first BabyLIN connected, '0' otherwise.</returns>
        </member>
        <member name="M:de.lipowsky.LIN.Devices.BabyLin.BL_searchBabyLinPorts(de.lipowsky.LIN.Devices.BabyLin.BL_portInfo_t[],System.Int32@)">
            <summary>
            Returns number of available Baby-LIN devices.
            </summary>
            <param name="portdata">
            Reference to a BLC_portInfo_t array, where the infos about the recognized Baby-LIN's will be supplied.
            </param>
            <param name="size">
            Reference to an interger which holds the maximum count of entries, which may be filled by the function into the array pdest.
            </param>
            <returns>Returns number of available Baby-LIN devices.</returns>
        </member>
        <member name="M:de.lipowsky.LIN.Devices.BabyLin.GetPorts">
            <summary>
            Get an array of all available COM Ports with a Baby-LIN connected
            </summary>
            <returns>An int array of the available virtual COM ports with a Baby-LIN device connected</returns>
        </member>
        <member name="M:de.lipowsky.LIN.Devices.BabyLin.BL_getFrameNrForFrameId(System.Int32,System.Byte)">
            <summary>
            Returns the number of signal entries in Frame idx.
            </summary>
            <param name="handle">Handle representing the connection; returned previously by BL_open().</param>
            <param name="frameId">Zero based index of requested frame entry.</param>
            <returns>
            Status of operation; '=0' means successful, '!=0' otherwise.
            See standard return values for error, or for textual
            representation (for return values &lt; -1000)  BL_getLastError().
            </returns>
        </member>
        <member name="M:de.lipowsky.LIN.Devices.BabyLin.BL_getNextFrame(System.Int32,de.lipowsky.LIN.Devices.BabyLin.BL_frame_t@)">
            <summary>
            Fetches the next frame on Channel from the receiver queue.
            Note: The Device fills the receiver queue only if command "disframe" sent before.
            </summary>
            <param name="handle">Handle representing the connection; returned previously by BL_open().</param>
            <param name="framedata">Reference to a frame_t structure.</param>
            <returns>
            Status of operation; '=0' means successful, '!=0' otherwise.
            See standard return values for error, or for textual
            representation (for return values &lt; -1000)  BL_getLastError().
            </returns>
        </member>
        <member name="M:de.lipowsky.LIN.Devices.BabyLin.BL_getNextFrameTimeout(System.Int32,de.lipowsky.LIN.Devices.BabyLin.BL_frame_t@,System.Int32)">
            <summary>
            Fetches the next frame on Channel from the receiver queue.
            Note: The Device fills the receiver queue only if command "disframe" sent before.
            </summary>
            <param name="handle">Handle representing the connection; returned previously by BL_open().</param>
            <param name="framedata">Reference to a frame_t structure.</param>
            <param name="timeoutms">Reference to a frame_t structure.</param>
            <returns>
            Status of operation; '=0' means successful, '!=0' otherwise.
            See standard return values for error, or for textual
            representation (for return values &lt; -1000)  BL_getLastError().
            </returns>
        </member>
        <member name="M:de.lipowsky.LIN.Devices.BabyLin.BL_getLastFrame(System.Int32,System.Int32,de.lipowsky.LIN.Devices.BabyLin.BL_frame_t@)">
            <summary>
            Fetches the frame with frame ID from the receiver queue.
            Note: The Baby-LIN fills the receiver queue only if command "disframe" sent before.
            </summary>
            <param name="handle">Handle representing the connection; returned previously by BL_open().</param>
            <param name="frameNr">Number of Frame do you received in queue.</param>
            <param name="framedata">Reference to a  BL_frame_t structure.</param>
            <returns>
            Status of operation; '=0' means successful, '!=0' otherwise.
            See standard return values for error, or for textual
            representation (for return values &lt; -1000)  BL_getLastError().
            </returns>
        </member>
        <member name="M:de.lipowsky.LIN.Devices.BabyLin.BL_getNextSignal(System.Int32,de.lipowsky.LIN.Devices.BabyLin.BL_signal_t@)">
            <summary>
            Fetches the next signal from the receiver queue.
            Note: The Baby-LIN fills the receiver queue only if command "dissignal" sent before.
            </summary>
            <param name="handle">Handle representing the connection; returned previously by BL_open().</param>
            <param name="signaldata">Reference to a BL_signal_t structure.</param>
            <returns>
            Status of operation; '=0' means successful, '!=0' otherwise.
            See standard return values for error, or for textual
            representation (for return values &lt; -1000)  BL_getLastError().
            </returns>
        </member>
        <member name="M:de.lipowsky.LIN.Devices.BabyLin.BL_getNextBusError(System.Int32,de.lipowsky.LIN.Devices.BabyLin.BL_error_t@)">
            <summary>
            Fetches the next LIN-bus error from the receiver queue.
            </summary>
            <param name="handle">Handle representing the connection; returned previously by BL_open().</param>
            <param name="errordata">Reference to a  BL_error_t structure.></param>
            <returns>
            Status of operation; '=0' means successful, '!=0' otherwise.
            See standard return values for error, or for textual
            representation (for return values &lt; -1000)  BL_getLastError().
            </returns>
        </member>
        <member name="M:de.lipowsky.LIN.Devices.BabyLin.BL_getNextDTLRequest(System.Int32,de.lipowsky.LIN.Devices.BabyLin.BL_dtl_t@)">
            <summary>
            Fetches the next complete DTL request from the receiver queue.
            </summary>
            <param name="handle">Handle representing the connection; returned previously by BL_open().</param>
            <param name="frame">Referenceto a BL_dtl_t structure.</param>
            <returns>
            Status of operation; '=0' means successful, '!=0' otherwise.
            See standard return values for error, or for textual
            representation (for return values &lt; -1000)  BL_getLastError().
            </returns>
        </member>
        <member name="M:de.lipowsky.LIN.Devices.BabyLin.BL_getNextDTLResponse(System.Int32,de.lipowsky.LIN.Devices.BabyLin.BL_dtl_t@)">
            <summary>
            Fetches the next complete DTL response from the receiver queue.
            </summary>
            <param name="handle">Handle representing the connection; returned previously by BL_open().</param>
            <param name="frame">Reference to a BL_dtl_t structure.</param>
            <returns>
            Status of operation; '=0' means successful, '!=0' otherwise.
            See standard return values for error, or for textual
            representation (for return values &lt; -1000)  BL_getLastError().
            </returns>
        </member>
        <member name="M:de.lipowsky.LIN.Devices.BabyLin.BL_getSignalValue(System.Int32,System.Int32,System.Int16@)">
            <summary>
            Returns the current signal value (for non-array signals).
            Note: The Baby-LIN reports the signal value only if command "dissignal" sent before.
            Special signalNr '-1' returns always 4711 in *value; signalNr '-2' returns a counter
            increased by 1 after every call.
            </summary>
            <param name="handle">Handle representing the connection; returned previously by BL_open().</param>
            <param name="signalNr">Number of the signal accordng to SDF.</param>
            <param name="value">The value.</param>
            <returns>
            Status of operation; '=0' means successful, '!=0' otherwise.
            See standard return values for error, or for textual
            representation (for return values &lt; -1000)  BL_getLastError().
            </returns>
        </member>
        <member name="M:de.lipowsky.LIN.Devices.BabyLin.BL_getSignalValueByName(System.Int32,System.String,System.Int16@)">
            <summary>
            Returns the current signal value (for non-array signals).
            Note: The Baby-LIN reports the signal value only if command "dissignal" sent before.
            </summary>
            <param name="handle">Handle representing the connection; returned previously by BL_open().</param>
            <param name="signalName">Name of the Signal as declared in LDF.</param>
            <param name="value">The value.</param>
            <returns>
            Status of operation; '=0' means successful, '!=0' otherwise.
            See standard return values for error, or for textual
            representation (for return values &lt; -1000)  BL_getLastError().
            </returns>
        </member>
        <member name="M:de.lipowsky.LIN.Devices.BabyLin.BL_getSignalArray(System.Int32,System.Int32,System.Byte[])">
            <summary>
            Returns the current signal value (for array signals).
            Note: The Baby-LIN reports the signal value only if command "dissignal" sent before.
            Special signalNr '-1' returns always the hex array { 0x01, 0x23, 0x45, 0x67, 0x89, 0xab, 0xcd, 0xef } in *array;
            signalNr '-2' returns a counted sequence, where the byte 0 holds the actual counter and the following bytes hold
            the 'history'; i.e.:
            
            1st call: { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }
            2nd call: { 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }
            3rd call: { 0x02, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }
            4th call: { 0x03, 0x02, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00 }
            ...etc...
            </summary>
            <param name="handle">Handle representing the connection; returned previously by BL_open().</param>
            <param name="SignalNr">Number of the signal accordng to SDF.</param>
            <param name="array">Reference to an 8 byte array getting the value. It must always have the size of 8 bytes, even for smaller array signals!</param>
            <returns>
            Status of operation; '=0' means successful, '!=0' otherwise.
            See standard return values for error, or for textual
            representation (for return values &lt; -1000)  BL_getLastError().
            </returns>
        </member>
        <member name="M:de.lipowsky.LIN.Devices.BabyLin.BL_getSignalArrayByName(System.Int32,System.String,System.Byte[])">
            <summary>
            Returns the current signal value (for array signals).
            Note: The Baby-LIN reports the signal value only if command "dissignal" sent before.
            </summary>
            <param name="handle">Handle representing the connection; returned previously by BL_open().</param>
            <param name="signalName">Name of the Signal as declared in LDF.</param>
            <param name="array">Reference to an 8 byte array getting the value. It must always have the size of 8 bytes, even for smaller array signals!</param>
            <returns>
            Status of operation; '=0' means successful, '!=0' otherwise.
            See standard return values for error, or for textual
            representation (for return values &lt; -1000)  BL_getLastError().
            </returns>
        </member>
        <member name="M:de.lipowsky.LIN.Devices.BabyLin.BL_isSignalArray(System.Int32,System.Int32)">
            <summary>
            Returns the SignalType about of given signal entry.
            </summary>
            <param name="handle">Handle representing the connection; returned previously by BL_open().</param>
            <param name="SignalNr">Zero based index of requested signal entry.</param>
            <returns>
            Status of operation; '=0' means successful, '!=0' otherwise.
            See standard return values for error, or for textual
            representation (for return values &lt; -1000)  BL_getLastError().
            </returns>
        </member>
        <member name="M:de.lipowsky.LIN.Devices.BabyLin.BL_encodeSignal(System.Int32,System.Int32,System.UInt32,System.String@,System.String@)">
            <summary>
            Encodes the signal's value as defined in the corresponding Signal Encoding tables of LDF/SDF.
            </summary>
            <param name="handle">Handle representing the connection; returned previously by BL_open().</param>
            <param name="signalNr">Number (Index) of the signal accordng to SDF.</param>
            <param name="value">Value to be encoded</param>
            <param name="encodedSignal">The encoded signal</param>
            <param name="encodedUnit">The encoded unit</param>
            <returns></returns>
        </member>
        <member name="M:de.lipowsky.LIN.Devices.BabyLin.BL_encodeSignal(System.Int32,System.Int32,System.UInt32,System.Text.StringBuilder,System.Int32@,System.Text.StringBuilder,System.Int32@)">
            <summary>
            Encodes the signal's value as defined in the corresponding Signal Encoding tables of LDF/SDF.
            If no SignalEncoding is specified for this signal, the value itself is written into destination buffer 'description'.
            If one of the required pointers is NULL or the buffer size is too small, the function returns the needed minimum buffer
            length in 'length'.
            It's possible to use two variants to get encoded signal:
            1) pointer 'encUnit' and 'buffLen1' set to NULL: then encoded signal saved inclusive unit in buffer 'encSignal'
            2) pointer 'encUnit' and 'buffLen1' != NULL: unit of signal saved separately in buffer 'encUnit'
            </summary>
            <param name="handle">Handle representing the connection; returned previously by BL_open().</param>
            <param name="signalNr">Number (Index) of the signal accordng to SDF.</param>
            <param name="value">Value to be encoded</param>
            <param name="encSignal">points to save location of encoded signal value (inclusive 'unit', if 'encUnit' not used)</param>
            <param name="encSignalLen">length of 'encSignal' buffer</param>
            <param name="encUnit">optional: points to save location of signal unit (if this pointer is NULL then 'unit' saved in 'encSignal' buffer also)</param>
            <param name="encUnitLen">optional: length of 'encUnit' buffer (if this pointer is NULL then 'unit' saved in 'encSignal' buffer also)</param>
            <returns>
            Status of operation; '=0' means successful, '!=0' otherwise.
            See standard return values for error, or for textual
            representation (for return values &lt; -1000)  BL_getLastError().
            </returns>
        </member>
        <member name="M:de.lipowsky.LIN.Devices.BabyLin.BL_getSignalsInFrameCount(System.Int32,System.Int32)">
            <summary>
            Returns the number of signals in a specific frame.
            </summary>
            <param name="handle">Handle representing the connection; returned previously by BL_open().</param>
            <param name="idx">The number of the frame number</param>
            <returns>Number of signals set by lsignal message.</returns>
        </member>
        <member name="M:de.lipowsky.LIN.Devices.BabyLin.BL_getSignalInFrame(System.Int32,System.Int32,System.Int32)">
            <summary>
            Returns the signal number from the frame index and signal index
            </summary>
            <param name="handle">Handle representing the connection; returned previously by BL_open().</param>
            <param name="frameIndex">Index of the frame.</param>
            <param name="signalIndex">Index of the signal.</param>
            <returns>The signal number</returns>
        </member>
        <member name="M:de.lipowsky.LIN.Devices.BabyLin.BL_getSignalsInFrame(System.Int32,System.Int32,de.lipowsky.LIN.Devices.BabyLin.BL_signal_t[],System.Int32@)">
            <summary>
            Give the Signals defined in Frame, now you have referenz of all signals in frame with FrameNr
            </summary>
            <param name="handle">Handle representing the connection; returned previously by BL_open().</param>
            <param name="FrameNr">Number of the frame accordng to SDF.</param>
            <param name="signals">Buffer for signals in frame</param>
            <param name="len">Num of signals in frame</param>
            <returns>Status of operation; '=0' means successful, '!=0' otherwise.
            See standard return values for error, or for textual
            representation (for return values smaller -1000) BL_getLastError().
            </returns>
        </member>
        <member name="M:de.lipowsky.LIN.Devices.BabyLin.BL_getSignalDataFromFrame(System.Int32,de.lipowsky.LIN.Devices.BabyLin.BL_frame_t@,System.Int32,de.lipowsky.LIN.Devices.BabyLin.BL_signal_t@)">
            <summary>
            returns the parsed Signal data from the containing frame
            </summary>
            <param name="handle">Handle representing the connection; returned previously by BL_open().</param>
            <param name="frame">The frame data that contains the desired signal.</param>
            <param name="signalIdx">The index of the desired signal.</param>
            <param name="signal">The desired signal data.</param>
            <returns>
            Status of operation; '=0' means successful, '!=0' otherwise.
            See standard return values for error, or for textual
            representation (for return values &lt; -1000)  BL_getLastError().
            </returns>
        </member>
        <member name="M:de.lipowsky.LIN.Devices.BabyLin.ReturnValueToString(System.Int32)">
            <summary>
            Convert the return value to a string.
            </summary>
            <param name="value">Return value from a BabyLIN.BL_... Function. For "BL_sendCommand(handle, "status;");" use the StatusToString( ) Function!</param>
            <returns>Return value as string</returns>
        </member>
        <member name="M:de.lipowsky.LIN.Devices.BabyLin.ReturnValueToMessage(System.Int32)">
            <summary>
            Convert the return value to a readable message.
            </summary>
            <param name="value">Return value from a BabyLIN.BL_... Function. For "BL_sendCommand(handle, "status;");" use the StatusToString( ) Function!</param>
            <returns>A message matching the return value</returns>
        </member>
        <member name="M:de.lipowsky.LIN.Devices.BabyLin.StatusToString(System.Int32)">
            <summary>
            Convert the return value from "BLC_sendCommand(handle, "status;");" to a string.
            </summary>
            <param name="status">Return value from BLC_sendCommand(...,"status;")</param>
            <returns>Status as string</returns>
        </member>
        <member name="M:de.lipowsky.LIN.Devices.BabyLin.BL_sendCommand(System.Int32,System.String)">
            <summary>
            Sends the (textual) specified command to the BabyLIN device.
            The command must match the command syntax as specified in the BabyLIN
            documentation. The trailing ';' may be omitted; but you may not specify
            several commands at once!
            </summary>
            <param name="handle">Handle representing the connection; returned previously by BL_open().</param>
            <param name="command">String with the command (i.e. "status;")</param>
            <returns>
            Status of operation; '=0' means successful, '!=0' otherwise.
            See standard return values for error, or for textual
            representation (for return values &lt; -1000)  BL_getLastError().
            </returns>
        </member>
        <member name="M:de.lipowsky.LIN.Devices.BabyLin.BL_sendCommandD(System.Int32,System.String,System.Byte[],System.Int32)">
            <summary>
            Sends the (textual) specified command to the BabyLIN device. Data response requested.
            The command must match the command syntax as specified in the BabyLIN
            documentation. The trailing ';' may be omitted; but you may not specify
            several commands at once!
            The content of '*length' will be set to really received number of data bytes.
            If one of the required pointers 'data' or 'length' is NULL or the buffer size is too small,
            the function returns the needed minimum buffer length in '*length' (if this pointer is valid).
            </summary>
            <param name="handle">Handle representing the connection; returned previously by BL_open().</param>
            <param name="command">String with the command (i.e. "status;")</param>
            <param name="data">Reference to data save location (destination buffer)</param>
            <param name="length">Destination buffer length.</param>
            <returns>
            Status of operation; '=0' means successful, '!=0' otherwise.
            See standard return values for error, or for textual
            representation (for return values &lt; -1000)  BL_getLastError().
            </returns>
        </member>
        <member name="M:de.lipowsky.LIN.Devices.BabyLin.BL_sendCommandFs(System.Int32,System.String,System.String)">
            <summary>
            Sends the (textual) specified command to the BabyLIN device with the ability to insert specific parameters.
            The command must match the command syntax as specified in the BabyLIN
            documentation. The trailing ';' may be omitted; but you may not specify
            several commands at once!
            This function works similiar to functions like 'printf'. You may specify
            placeholders, whose value get specified as parameter to the function.
            
            Possible placeholders are:
            
            %S    insert signal number for name specified as parameter
            %F    insert frame number for name specified as parameter
            %M    insert macro number for name specified as parameter
            
            Examples:
            
            BL_sendCommandFs(handle, "setsig %S 1;", "signal name");
            BL_sendCommandFs(handle, "disframe %F;", "frame name");
            BL_sendCommandFs(handle, "macro_exec %M;", "macro name");
            </summary>
            <param name="handle">Handle representing the connection; returned previously by BL_open().</param>
            <param name="command">String with the command and placeholders (i.e. "setsig %S 1;").</param>
            <param name="name">Name of placeholders %S: signal name %F: frame name %M: macro name (LDF-Names)</param>
            <returns>
            Status of operation; '=0' means successful, '!=0' otherwise.
            See standard return values for error, or for textual
            representation (for return values &lt; -1000)  BL_getLastError().
            </returns>
        </member>
        <member name="M:de.lipowsky.LIN.Devices.BabyLin.BL_sendRaw(System.Int32,System.Byte[],System.Int32)">
            <summary>
            Sends the (raw!) command to the BabyLIN device.
            The command must be encoded in the binary DP-Message format of BabyLIN.
            </summary>
            <param name="handle">Handle representing the connection; returned previously by BL_open().</param>
            <param name="data">Buffer with the designated command(s)</param>
            <param name="count">length of buffer; gets set to actual sent command's length.</param>
            <returns></returns>
        </member>
        <member name="M:de.lipowsky.LIN.Devices.BabyLin.BL_getVersion(System.Int32@,System.Int32@)">
            <summary>
            Get the major and minor version number of the library.
            </summary>
            <param name="major">major part of version number.</param>
            <param name="minor">minor part of version number.</param>
        </member>
        <member name="M:de.lipowsky.LIN.Devices.BabyLin.BL_getVersionString">
            <summary>
            Get the version string of the library.
            </summary>
            <returns>
            returns a string with the version information.
            </returns>
        </member>
        <member name="M:de.lipowsky.LIN.Devices.BabyLin.BL_open(System.Int32)">
            <summary>
            This function tries to open the designated port and to start communication
            with the device.
            </summary>
            <param name="port">
            represents the port number; it uses Windows-style numbering,
            which means it starts with '1' for the first serial port.
            '0' is reserved.
            </param>
            <returns>
            Returns an handle for the designated connection; on failure
            NULL. You may fetch the corresponding (textual) error (for
            return values &lt; -1000) with  BL_getLastError().
            </returns>
        </member>
        <member name="M:de.lipowsky.LIN.Devices.BabyLin.BL_close(System.Int32)">
            <summary>
            Closes an open connection, given by handle.
            </summary>
            <param name="handle">Handle representing the connection; returned previously by BL_open().</param>
            <returns>
            Status of operation; '=0' means successful, '!=0' otherwise.
            See standard return values for error, or for textual
            representation  BL_getLastError.
            </returns>
        </member>
        <member name="M:de.lipowsky.LIN.Devices.BabyLin.BL_closeAll">
            <summary>
            Close ALL connections to ALL Devices.
            </summary>
            <returns>
            Status of operation; '=0' means successful, '!=0' otherwise.
            See standard return values for error, or for textual
            representation  BL_getLastError().
            </returns>
        </member>
        <member name="M:de.lipowsky.LIN.Devices.BabyLin.BL_flush(System.Int32)">
            <summary>
            Resets the BabyLIN device to an consistent and deactivated state.
            Afterwards, the device will no longer monitor the bus, neither acting as slave
            nor as master.
            </summary>
            <param name="handle">Handle representing the connection; returned previously by BL_open().</param>
            <returns>
            Status of operation; '=0' means successful, '!=0' otherwise.
            See standard return values for error, or for textual
            representation (for return values &lt; -1000)  BL_getLastError().
            </returns>
        </member>
        <member name="M:de.lipowsky.LIN.Devices.BabyLin.BL_getTargetID(System.Int32,de.lipowsky.LIN.Devices.BabyLin.BL_targetid_t@)">
            <summary>
            Handle representing the connection; returned previously by connectDevice().
            </summary>
            <param name="handle">Handle representing the connection; returned previously by BL_open().</param>
            <param name="targetID">Reference to BL_targetid_t structure to hold the information after the successful call, has to be allocated.</param>
            <returns>
            Status of operation; '=0' means successful, '!=0' otherwise.
            See standard return values for error, or for textual
            representation (for return values &lt; -1000)  BL_getLastError().
            </returns>
        </member>
        <member name="M:de.lipowsky.LIN.Devices.BabyLin.BL_loadSDF(System.Int32,System.String,System.Int32)">
            <summary>
            Loads the specified SDF-file into library and optionally the BabyLIN device.
            The SDF could be generated by LINWorks/SessionConf from a LDF file.
            WARNING: this resets the device upon download!
            </summary>
            <param name="handle">Handle representing the connection; returned previously by BL_open().</param>
            <param name="filename">C-string with the (fully qualified) filename (i.e. "mybus.sdf", if in the same directory, or "c:/data/mybus.sdf").</param>
            <param name="download">Boolean value, determines if the SDF profile gets downloaded into the BabyLIN device (!=0) or only used in the library (=0).</param>
            <returns>
            Status of operation; '=0' means successful, '!=0' otherwise.
            See standard return values for error, or for textual
            representation (for return values &lt; -1000)  BL_getLastError().
            </returns>
        </member>
        <member name="M:de.lipowsky.LIN.Devices.BabyLin.BL_downloadSDF(System.Int32)">
            <summary>
            Loads the already loaded SDF-file into the BabyLIN device.
            The SDF could be generated by LINWorks/SessionConf from a LDF file and must have been
            loaded previously by an BL_loadSDF() command.
            </summary>
            <param name="handle">Handle representing the connection; returned previously by BL_open().</param>
            <returns>
            Status of operation; '=0' means successful, '!=0' otherwise.
            See standard return values for error, or for textual
            representation (for return values &lt; -1000)  BL_getLastError().
            </returns>
        </member>
        <member name="M:de.lipowsky.LIN.Devices.BabyLin.BL_getLastError(System.Int32)">
            <summary>
            Returns a C-string with the textual representation of the last error.
            The string returned is a pointer to an internal variable; don't ever try
            to free it! The errors are described in English.
            Note however, only Errorcodes &lt; -1000 get described - all other return
            values are directly sent by the device. Values >0 usually denote the index
            of the wrong parameter of a command. Values &lt; 0 define other errors like
            'out of memory' and alike. Consult the BabyLIN documentation for further
            reference.
            </summary>
            <param name="handle">Handle representing the connection; returned previously by BL_open().</param>
            <returns>C-String with textual description of last error.</returns>
        </member>
        <member name="M:de.lipowsky.LIN.Devices.BabyLin.BL_getNodeCount(System.Int32)">
            <summary>
            Returns the number of node entries.
            </summary>
            <param name="handle">Handle representing the connection; returned previously by BL_open().</param>
            <returns>Number of nodes set by lnode message.</returns>
        </member>
        <member name="M:de.lipowsky.LIN.Devices.BabyLin.BL_getNodeName(System.Int32,System.Int32)">
            <summary>
            Returns the name of given node entry.
            </summary>
            <param name="handle">Handle representing the connection; returned previously by BL_open().</param>
            <param name="idx">Zero based index of requested node entry.</param>
            <returns>The name of given node entry.</returns>
        </member>
        <member name="M:de.lipowsky.LIN.Devices.BabyLin.BL_getFrameCount(System.Int32)">
            <summary>
            Returns the number of frame entries.
            </summary>
            <param name="handle">Handle representing the connection; returned previously by BL_open().</param>
            <returns>Number of frames set by lframe message.</returns>
        </member>
        <member name="M:de.lipowsky.LIN.Devices.BabyLin.BL_getFrameName(System.Int32,System.Int32)">
            <summary>
            Returns the name of given frame entry.
            </summary>
            <param name="handle">Handle representing the connection; returned previously by BL_open().</param>
            <param name="idx">Zero based index of requested frame entry.</param>
            <returns>The name of given frame entry.</returns>
        </member>
        <member name="M:de.lipowsky.LIN.Devices.BabyLin.BL_getFrameDetails(System.Int32,System.Int32,System.Int32@,System.Int32@,System.Int32@,System.Int32@)">
            <summary>
            Returns some details for given frame entry.
            </summary>
            <param name="handle">Handle representing the connection; returned previously by BL_open().</param>
            <param name="idx">Zero based index of requested frame entry (sdf number).</param>
            <param name="linid"> Reference to int, which gets filled with LIN ID (without parity bits)</param>
            <param name="size">Reference to int, which gets filled with size of frame in bytes</param>
            <param name="nodenum">Reference to int, which gets filled with nodeindex of publishing node for this frame</param>
            <param name="frametype">Reference to int, which gets filled with Lin version of this frame</param>
            <returns></returns>
        </member>
        <member name="M:de.lipowsky.LIN.Devices.BabyLin.BL_getSignalCount(System.Int32)">
            <summary>
            Returns the number of signal entries.
            </summary>
            <param name="handle">Handle representing the connection; returned previously by BL_open().</param>
            <returns>Number of signals set by lsignal message.</returns>
        </member>
        <member name="M:de.lipowsky.LIN.Devices.BabyLin.BL_getSignalName(System.Int32,System.Int32)">
            <summary>
            Returns the name of given signal entry.
            </summary>
            <param name="handle">Handle representing the connection; returned previously by BL_open().</param>
            <param name="idx">Zero based index of requested signal entry.</param>
            <returns>The name of given signal entry.</returns>
        </member>
        <member name="M:de.lipowsky.LIN.Devices.BabyLin.GetWrapperVersion">
            <summary>
            Returns a string with the version information of the .net Wrapper DLL.
            </summary>
            <returns>a version string</returns>
        </member>
        <member name="M:de.lipowsky.LIN.Devices.BabyLin.BL_setDTLMode(System.Int32,System.Int32)">
            <summary>
            Sets the Diagnostic Transport Layer mode.
            
            There are different Diagnostic modes, which offer different levels of protocol functionality.
            The Baby-LIN will start with Diagnostic OFF on Power Up.
            If the BabyLIN acts as LIN master then the selection of an Diagnostic Mode happens trough the usage
            of the appropriate API function calls. So the API functions BL_sendRawMasterRequest or BL_sendRawSlaveResponse
            will start the Diagnostic RAW mode, where as the API calls BL_sendDTLRequest or BL_sendDTLResponse will start the
            Diagnostic DTL mode.
            If the BabyLIN acts as LIN slave then the DTL mode must be set by use of this function.
            It is not possible to use different Diagnostics modes at the same time !
            </summary>
            <param name="handle">Handle representing the connection; returned previously by BL_open().</param>
            <param name="mode">
            DTL mode:
            0 = DTL_NONE = no DTL Support
            1 = DTL_RAW = RAW Mode DTL Support
            2 = DTL_COOKED = Cooked Mode DTL Support
            </param>
            <returns>
            Status of operation; '=0' means successful, '!=0' otherwise.
            See standard return values for error, or for textual
            representation (for return values &lt; -1000)  BL_getLastError().
            </returns>
        </member>
        <member name="M:de.lipowsky.LIN.Devices.BabyLin.BL_sendDTLRequest(System.Int32,System.Byte,System.Int32,System.Byte[])">
            <summary>
            Sends the given DTL MasterReq to the node identified by 'nad'.
            </summary>
            <param name="handle">Handle representing the connection; returned previously by BL_open().</param>
            <param name="nad">NAD of the node the request gets send to.</param>
            <param name="length">Length of the following data array.</param>
            <param name="data">DTL frame data (begins with SID, followed by up to 4095 data bytes).</param>
            <returns>
            Status of operation; '=0' means successful, '!=0' otherwise.
            See standard return values for error, or for textual
            representation (for return values &lt; -1000)  BL_getLastError().
            </returns>
        </member>
        <member name="M:de.lipowsky.LIN.Devices.BabyLin.Bl_sendDTLResponse(System.Int32,System.Byte,System.Int32,System.Byte[])">
            <summary>
            Sends the given DTL SlaveResp for the node identified by 'nad'.
            </summary>
            <param name="handle">Handle representing the connection; returned previously by BL_open().</param>
            <param name="nad">NAD of the node the response gets send for.</param>
            <param name="length">Length of the following data array.</param>
            <param name="data">DTL frame data (begins with RSID, followed by up to 4095 data bytes).</param>
            <returns>
            Status of operation; '=0' means successful, '!=0' otherwise.
            See standard return values for error, or for textual
            representation (for return values &lt; -1000)  BL_getLastError().
            </returns>
        </member>
        <member name="M:de.lipowsky.LIN.Devices.BabyLin.BL_sendRawSlaveResponse(System.Int32,System.Byte[],System.Byte[],System.Byte[],System.Int32)">
            <summary>
            Sends the given (non-DTL) SlaveResp upon receive of matching MasterReq with the specified as data (in as many frames as needed).
            Upon the reveive of the next MasterReq frame, the every bit of the requestis compared to
            'reqdata' if the corresponding bit of 'reqmask' is set (1). If all match, Baby-LIN starts
            to send out the data given in 'data', 8 bytes with each SlaveResp frame.
            </summary>
            <param name="handle">Handle representing the connection; returned previously by BL_open().</param>
            <param name="reqdata">Data of the expected MasterReq (exactly 8 bytes).</param>
            <param name="reqmask">Mask for 'reqdata' to indicate which bits must match (exactly 8 bytes).</param>
            <param name="data">MasterReq frame data (multiple of 8 bytes).</param>
            <param name="length">Length of data to send.</param>
            <returns>
            Status of operation; '=0' means successful, '!=0' otherwise.
            See standard return values for error, or for textual
            representation (for return values &lt; -1000)  BL_getLastError().
            </returns>
        </member>
        <member name="M:de.lipowsky.LIN.Devices.BabyLin.BL_sendRawMasterRequest(System.Int32,System.Byte[],System.Int32)">
            <summary>
            Sends the given (non-DTL) MasterReq with the specified 8 bytes as data.
            
            The internal raw-SlaveResponse-buffer is being reset and the Baby-LIN device gets
            instructed to report the next 'count' SlaveResp-frames which in turn are accumulated
            into the SlaveResponse-buffer which can be queried by BL_getRawSlaveResponse().
            </summary>
            <param name="handle">Handle representing the connection; returned previously by BL_open().</param>
            <param name="data">MasterReq frame data (exactly 8 bytes).</param>
            <param name="count">Number of expected SlaveResp frames.</param>
            <returns>
            Status of operation; '=0' means successful, '!=0' otherwise.
            See standard return values for error, or for textual
            representation (for return values &lt; -1000)  BL_getLastError().
            </returns>
        </member>
        <member name="M:de.lipowsky.LIN.Devices.BabyLin.BL_getDTLRequestStatus(System.Int32)">
            <summary>
            Returns the status of the last request-send operation.
            </summary>
            <param name="handle">Handle representing the connection; returned previously by BL_open().</param>
            <returns>
            Status of operation; '=0' means successful, '!=0' otherwise.
            See standard return values for error, or for textual
            representation (for return values &lt; -1000)  BL_getLastError().
            </returns>
        </member>
        <member name="M:de.lipowsky.LIN.Devices.BabyLin.BL_getDTLResponseStatus(System.Int32)">
            <summary>
            Returns the status of the last request-send operation.
            </summary>
            <param name="handle">Handle representing the connection; returned previously by BL_open().</param>
            <returns>
            Status of operation; '=0' means successful, '!=0' otherwise.
            See standard return values for error, or for textual
            representation (for return values &lt; -1000)  BL_getLastError().
            </returns>
        </member>
        <member name="M:de.lipowsky.LIN.Devices.BabyLin.BL_getRawSlaveResponse(System.Int32,System.Byte[],System.Int32)">
            <summary>
            Returns the first 'count' bytes of the current SlaveResp-buffer.
            
            The internal raw-SlaveResponse-buffer is filled continuously with the data bytes of
            reported SlaveResp-frames and is being reset upon every call of BL_sendRawMasterRequest().
            </summary>
            <param name="handle">Handle representing the connection; returned previously by BL_open().</param>
            <param name="data">Pointer to char array which gets filled (must hold min. 'length' bytes).</param>
            <param name="length">How many bytes should get returned.</param>
            <returns>
            Status of operation; '=0' means successful, '!=0' otherwise.
            See standard return values for error, or for textual
            representation (for return values &lt; -1000)  BL_getLastError().
            </returns>
        </member>
        <member name="M:de.lipowsky.LIN.Devices.BabyLin.BL_lastAnswerHasData(System.Int32)">
            <summary>
            Returns BL_OK if the last answer to a command contained additional data.
            If there is no additional data present it returns BL_NO_ANSWER_DATA.
            </summary>
            <param name="handle">Handle representing the connection; returned previously by BL_open().</param>
            <returns>
            Status of operation; '=0' means successful, '!=0' otherwise.
            See standard return values for error, or for textual
            representation (for return values &lt; -1000)  BL_getLastError().
            </returns>
        </member>
        <member name="M:de.lipowsky.LIN.Devices.BabyLin.BL_getAnswerTypeByName(System.Int32,System.String,System.Int32@,System.Int32@)">
            <summary>
            If the last answer to a command contained additional data, then this function reports
            the type and size for a specific answer data set. Data set selected by name.
            The following types of data sets are possible:
            BL_ANSWER_TYPE_INT - 32bit integer
            BL_ANSWER_TYPE_STR - zero-terminated string (variable length)
            BL_ANSWER_TYPE_BIN - binary data (variable length)
            </summary>
            <param name="handle">Handle representing the connection; returned previously by BL_open().</param>
            <param name="name">String with the name of answer data set</param>
            <param name="type">type of data set is returned within</param>
            <param name="length">length of data set is returned within</param>
            <returns>
            Status of operation; '=0' means successful, '!=0' otherwise.
            See standard return values for error, or for textual
            representation (for return values &lt; -1000)  BL_getLastError().
            </returns>
        </member>
        <member name="M:de.lipowsky.LIN.Devices.BabyLin.BL_getAnswerTypeByIndex(System.Int32,System.Int32,System.Int32@,System.Int32@)">
            <summary>
            If the last answer to a command contained additional data, then this function reports
            the type and size for a specific answer data set. Data set selected by index.
            The following types of data sets are possible:
            BL_ANSWER_TYPE_INT - 32bit integer
            BL_ANSWER_TYPE_STR - zero-terminated string (variable length)
            BL_ANSWER_TYPE_BIN - binary data (variable length)
            </summary>
            <param name="handle">Handle representing the connection; returned previously by BL_open().</param>
            <param name="idx">zero-based index of the answer data set</param>
            <param name="type">type of data set is returned within</param>
            <param name="length">length of data set is returned within</param>
            <returns>
            Status of operation; '=0' means successful, '!=0' otherwise.
            See standard return values for error, or for textual
            representation (for return values &lt; -1000)  BL_getLastError().
            </returns>
        </member>
        <member name="M:de.lipowsky.LIN.Devices.BabyLin.BL_getAnswerByName(System.Int32,System.String,System.Byte[]@,System.Int32)">
            <summary>
            If the last answer to a command contained additional data, then this function copies
            the answer data set over into the destination buffer. Data set selected by name.
            </summary>
            <param name="handle">Handle representing the connection; returned previously by BL_open().</param>
            <param name="name">String with the name of answer data set</param>
            <param name="buffer">destination buffer for the data set></param>
            <param name="length">length of destination buffer</param>
            <returns>
            Status of operation; '=0' means successful, '!=0' otherwise.
            See standard return values for error, or for textual
            representation (for return values &lt; -1000)  BL_getLastError().
            </returns>
        </member>
        <member name="M:de.lipowsky.LIN.Devices.BabyLin.BL_getAnswerByIndex(System.Int32,System.Int32,System.Byte[]@,System.Int32)">
            <summary>
            If the last answer to a command contained additional data, then this function copies
            the answer data set over into the destination buffer. Data set selected by index.
            </summary>
            <param name="handle">Handle representing the connection; returned previously by BL_open().</param>
            <param name="idx">zero-based index of the answer data set</param>
            <param name="buffer">destination buffer for the data set</param>
            <param name="length">length of destination buffer</param>
            <returns>
            Status of operation; '=0' means successful, '!=0' otherwise.
            See standard return values for error, or for textual
            representation (for return values &lt; -1000)  BL_getLastError().
            </returns>
        </member>
        <member name="M:de.lipowsky.LIN.Devices.BabyLin.BL_loadGPS(System.Int32,System.String)">
            <summary>
            Loads a GPS file directly into the BabyLIN device.
            A previously loaded file will be destroyed.
            </summary>
            <param name="handle">Handle representing the connection; returned previously by BL_open().</param>
            <param name="filename">String with the (fully qualified) filename (i.e. "mybus.sdf", if in the same directory, or "c:/data/mybus.sdf").</param>
            <returns>
            Status of operation; '=0' means successful, '!=0' otherwise.
            See standard return values for error, or for textual
            representation (for return values &lt; -1000)  BL_getLastError().
            </returns>
        </member>
        <member name="M:de.lipowsky.LIN.Devices.BabyLin.BL_SDF_getNodeNr(System.Int32,System.String)">
            <summary>
            Get the SDF's number for node by name.
            </summary>
            <param name="handle">Handle representing the connection; returned previously by BL_open().</param>
            <param name="name">Name of the node.</param>
            <returns>
            Returns the node's number or -1 if there's no signal with
            specified name.
            See standard return values for error, or for textual
            representation (for return values &lt; -1000)  BL_getLastError().
            </returns>
        </member>
        <member name="M:de.lipowsky.LIN.Devices.BabyLin.BL_SDF_getSignalNr(System.Int32,System.String)">
            <summary>
            Get the SDF's number for signal by name.
            </summary>
            <param name="handle">Handle representing the connection; returned previously by BL_open().</param>
            <param name="name">Name of the signal.</param>
            <returns>
            Returns the node's number or -1 if there's no signal with
            specified name.
            See standard return values for error, or for textual
            representation (for return values &lt; -1000)  BL_getLastError().
            </returns>
        </member>
        <member name="M:de.lipowsky.LIN.Devices.BabyLin.BL_SDF_getFrameNr(System.Int32,System.String)">
            <summary>
            Get the SDF's number for frame by name.
            </summary>
            <param name="handle">Handle representing the connection; returned previously by BL_open().</param>
            <param name="name">Name of the frame.</param>
            <returns>
            Returns the node's number or -1 if there's no signal with
            specified name.
            See standard return values for error, or for textual
            representation (for return values &lt; -1000)  BL_getLastError().
            </returns>
        </member>
        <member name="M:de.lipowsky.LIN.Devices.BabyLin.BL_SDF_getScheduleNr(System.Int32,System.String)">
            <summary>
            Get the SDF's number for schedule by name.
            </summary>
            <param name="handle">Handle representing the connection; returned previously by BL_open().</param>
            <param name="name">Name of the schedule.</param>
            <returns>
            Returns the node's number or -1 if there's no signal with
            specified name.
            See standard return values for error, or for textual
            representation (for return values &lt; -1000)  BL_getLastError().
            </returns>
        </member>
        <member name="M:de.lipowsky.LIN.Devices.BabyLin.BL_SDF_getNumSchedules(System.Int32)">
            <summary>
            Get the number of schedule tables in the SDF.
            </summary>
            <param name="handle">Handle representing the connection; returned previously by BL_open().</param>
            <returns>
            Returns the node's number or -1 if there's no signal with
            specified name.
            See standard return values for error, or for textual
            representation (for return values &lt; -1000)  BL_getLastError().
            </returns>
        </member>
        <member name="M:de.lipowsky.LIN.Devices.BabyLin.BL_SDF_getScheduleName(System.Int32,System.Int32)">
            <summary>
            Get the SDF's name of schedule by number.
            </summary>
            <param name="handle">Handle representing the connection; returned previously by BL_open().</param>
            <param name="schedule_nr">Index of the schedule.</param>
            <returns>
            Returns the schedule's name or empty string if there's no
            schedule with specified index.
            </returns>
        </member>
        <member name="M:de.lipowsky.LIN.Devices.BabyLin.BL_SDF_getMacroNr(System.Int32,System.String)">
            <summary>
            Get the SDF's number for macro by name.
            </summary>
            <param name="handle">Handle representing the connection; returned previously by BL_open().</param>
            <param name="name">Name of the macro.</param>
            <returns>
            Returns the node's number or -1 if there's no signal with
            specified name.
            See standard return values for error, or for textual
            representation (for return values &lt; -1000)  BL_getLastError().
            </returns>
        </member>
        <member name="M:de.lipowsky.LIN.Devices.BabyLin.BL_registerFrameCallback(System.Int32,de.lipowsky.LIN.Devices.BabyLin.CallBackFrameDelegate)">
            <summary>
            Registers a callback function, which is called on every reception of a (monitored) frame.
            Issuing a NULL-pointer de-registers the callback function. As the function is called
            from another thread context, take care of thread-safety (i.e. using mutexes, etc.).
            </summary>
            <param name="handle">Handle representing the connection; returned previously by BL_open().</param>
            <param name="pCallback">Reference to a function call-compatible to CallBackFrameDelegate.</param>
            <returns>
            Status of operation; '=0' means successful, '!=0' otherwise.
            See standard return values for error, or for textual
            representation (for return values &lt; -1000)  BL_getLastError().
            </returns>
        </member>
        <member name="M:de.lipowsky.LIN.Devices.BabyLin.BL_registerSignalCallback(System.Int32,de.lipowsky.LIN.Devices.BabyLin.CallBackSignalDelegate)">
            <summary>
            Registers a callback function, which is called on every reception of a (monitored) signal.
            Issuing a NULL-pointer de-registers the callback function. As the function is called
            from another thread context, take care of thread-safety (i.e. using mutexes, etc.).
            </summary>
            <param name="handle">Handle representing the connection; returned previously by BL_open().</param>
            <param name="pCallback">Reference to a function call-compatible to CallBackSignalDelegate.</param>
            <returns>
            Status of operation; '=0' means successful, '!=0' otherwise.
            See standard return values for error, or for textual
            representation (for return values &lt; -1000)  BL_getLastError().
            </returns>
        </member>
        <member name="M:de.lipowsky.LIN.Devices.BabyLin.BL_registerBusErrorCallback(System.Int32,de.lipowsky.LIN.Devices.BabyLin.CallBackErrorDelegate)">
            <summary>
            Registers a callback function, which is called on every reception of a bus error.
            Issuing a NULL-pointer de-registers the callback function. As the function is called
            from another thread context, take care of thread-safety (i.e. using mutexes, etc.).
            </summary>
            <param name="handle">Handle representing the connection; returned previously by BL_open().</param>
            <param name="pCallback">Reference to a function call-compatible to CallBackErrorDelegate.</param>
            <returns>
            Status of operation; '=0' means successful, '!=0' otherwise.
            See standard return values for error, or for textual
            representation (for return values &lt; -1000)  BL_getLastError().
            </returns>
        </member>
        <member name="M:de.lipowsky.LIN.Devices.BabyLin.BL_registerDebugCallback(System.Int32,de.lipowsky.LIN.Devices.BabyLin.CallBackDebugDelegate)">
            <summary>
            Registers a callback function, which is called on every reception of a debug message.
            Issuing a NULL-pointer de-registers the callback function. As the function is called
            from another thread context, take care of thread-safety (i.e. using mutexes, etc.).
            </summary>
            <param name="handle">Handle representing the connection; returned previously by BL_open().</param>
            <param name="pCallback">Reference to a function call-compatible to CallBackDebugDelegate.</param>
            <returns>
            Status of operation; '=0' means successful, '!=0' otherwise.
            See standard return values for error, or for textual
            representation (for return values &lt; -1000)  BL_getLastError().
            </returns>
        </member>
        <member name="M:de.lipowsky.LIN.Devices.BabyLin.BL_registerDTLRequestCallback(System.Int32,de.lipowsky.LIN.Devices.BabyLin.CallBackDTLDelegate)">
            <summary>
            Registers a callback function, which is called on every reception of a DTL request, but only if at least one Slave is emulated.
            Issuing a NULL-pointer de-registers the callback function. As the function is called
            from another thread context, take care of thread-safety (i.e. using mutexes, etc.).
            </summary>
            <param name="handle">Handle representing the connection; returned previously by BL_open().</param>
            <param name="pCallback">Reference to a function call-compatible to CallBackDTLDelegate.</param>
            <returns>
            Status of operation; '=0' means successful, '!=0' otherwise.
            See standard return values for error, or for textual
            representation (for return values &lt; -1000)  BL_getLastError().
            </returns>
        </member>
        <member name="M:de.lipowsky.LIN.Devices.BabyLin.BL_registerDTLResponseCallback(System.Int32,de.lipowsky.LIN.Devices.BabyLin.CallBackDTLDelegate)">
            <summary>
            Registers a callback function, which is called on every reception of a DTL response, but only if BabyLIN emulates the master node.
            Issuing a NULL-pointer de-registers the callback function. As the function is called
            from another thread context, take care of thread-safety (i.e. using mutexes, etc.).
            </summary>
            <param name="handle">Handle representing the connection; returned previously by BL_open().</param>
            <param name="pCallback">Reference to a function call-compatible to CallBackDTLDelegate.</param>
            <returns>
            Status of operation; '=0' means successful, '!=0' otherwise.
            See standard return values for error, or for textual
            representation (for return values &lt; -1000)  BL_getLastError().
            </returns>
        </member>
        <member name="T:de.lipowsky.LIN.Devices.BabyLin.CallBackFrameDelegate">
            <summary>
            callback function header whenever a frame report is received from a BabyLIN device
            </summary>
            <param name="frame">A frame</param>
        </member>
        <member name="T:de.lipowsky.LIN.Devices.BabyLin.CallBackSignalDelegate">
            <summary>
            callback function header whenever a signal report is received from a BabyLIN device
            </summary>
            <param name="signal">A signal</param>
        </member>
        <member name="T:de.lipowsky.LIN.Devices.BabyLin.CallBackErrorDelegate">
            <summary>
            callback function header whenever a buserror report is received from a BabyLIN device
            </summary>
            <param name="error">An error</param>
        </member>
        <member name="T:de.lipowsky.LIN.Devices.BabyLin.CallBackDebugDelegate">
            <summary>
            callback function header whenever a debug message is received from a BabyLIN device
            </summary>
            <param name="data">A debug string</param>
        </member>
        <member name="T:de.lipowsky.LIN.Devices.BabyLin.CallBackDTLDelegate">
            <summary>
            callback function header whenever a dtl request is received from a BabyLIN device
            </summary>
            <param name="dtl">A DTL request or response</param>
        </member>
        <member name="T:de.lipowsky.LIN.Devices.BabyLin.BL_DTL_STATUS">
            <summary>
            Status of DTL protocol frame
            </summary>
        </member>
        <member name="F:de.lipowsky.LIN.Devices.BabyLin.BL_DTL_STATUS.LD_COMPLETED">
            <summary>
            Completed
            </summary>
        </member>
        <member name="F:de.lipowsky.LIN.Devices.BabyLin.BL_DTL_STATUS.LD_FAILED">
            <summary>
            Failed
            </summary>
        </member>
        <member name="F:de.lipowsky.LIN.Devices.BabyLin.BL_DTL_STATUS.LD_IN_PROGRESS">
            <summary>
            In progress
            </summary>
        </member>
        <member name="T:de.lipowsky.LIN.Devices.BabyLin.BL_ANSWER_TYPE">
            <summary>
            Type of answer returned by BL_getAnswerTypeByName() and BL_getAnswerTypeByIndex()
            </summary>
        </member>
        <member name="F:de.lipowsky.LIN.Devices.BabyLin.BL_ANSWER_TYPE.BL_ANSWER_TYPE_INT">
            <summary>
            32bit integer
            </summary>
        </member>
        <member name="F:de.lipowsky.LIN.Devices.BabyLin.BL_ANSWER_TYPE.BL_ANSWER_TYPE_STR">
            <summary>
            zero-terminated string (variable length)
            </summary>
        </member>
        <member name="F:de.lipowsky.LIN.Devices.BabyLin.BL_ANSWER_TYPE.BL_ANSWER_TYPE_BIN">
            <summary>
            binary data (variable length)
            </summary>
        </member>
        <member name="T:de.lipowsky.LIN.Devices.BabyLin.BL_signal_t">
            <summary>
            Carries information about one signal.
            </summary>
        </member>
        <member name="F:de.lipowsky.LIN.Devices.BabyLin.BL_signal_t.index">
            <summary>
            Index number of signal; see the SDF for the adequate number
            </summary>
        </member>
        <member name="F:de.lipowsky.LIN.Devices.BabyLin.BL_signal_t.isArray">
            <summary>
            Defines wether this signal is a normal, value-based one (0) or LIN2.0 array signal (1).
            </summary>
        </member>
        <member name="F:de.lipowsky.LIN.Devices.BabyLin.BL_signal_t.value">
            <summary>
            Value of the signal.
            </summary>
        </member>
        <member name="F:de.lipowsky.LIN.Devices.BabyLin.BL_signal_t.arrayLength">
            <summary>
            Length of the array.
            </summary>
        </member>
        <member name="F:de.lipowsky.LIN.Devices.BabyLin.BL_signal_t.arrayData">
            <summary>
            Value(s) of the signal, if isArray == 1.
            </summary>
        </member>
        <member name="M:de.lipowsky.LIN.Devices.BabyLin.BL_signal_t.ToString">
            <summary>
            Readable 
            </summary>
        </member>
        <member name="T:de.lipowsky.LIN.Devices.BabyLin.BL_targetid_t">
            <summary>
            Carries information about DTL protocol (both requests and responses).
            </summary>
        </member>
        <member name="F:de.lipowsky.LIN.Devices.BabyLin.BL_targetid_t.type">
            <summary>
            Type of the hardware (0 Baby-LIN RC, 1 Baby-LIN RM, 2 Baby-LIN, 3 HARP-1, 4 WDTS)
            </summary>
        </member>
        <member name="F:de.lipowsky.LIN.Devices.BabyLin.BL_targetid_t.version">
            <summary>
            Software version
            </summary>
        </member>
        <member name="F:de.lipowsky.LIN.Devices.BabyLin.BL_targetid_t.build">
            <summary>
            Software build number
            </summary>
        </member>
        <member name="F:de.lipowsky.LIN.Devices.BabyLin.BL_targetid_t.flags">
            <summary>
            Software related flags (bit 0 set = test version)
            </summary>
        </member>
        <member name="F:de.lipowsky.LIN.Devices.BabyLin.BL_targetid_t.serial">
            <summary>
            Device's serial number
            </summary>
        </member>
        <member name="F:de.lipowsky.LIN.Devices.BabyLin.BL_targetid_t.heapsize">
            <summary>
            Remaining heap size on device (memory available for SDF dowload)
            </summary>
        </member>
        <member name="F:de.lipowsky.LIN.Devices.BabyLin.BL_targetid_t.spare">
            <summary>
            Reserved value (ignore for now)
            </summary>
        </member>
        <member name="F:de.lipowsky.LIN.Devices.BabyLin.BL_targetid_t.name">
            <summary>
            Textual name of the device (zero-terminated C-string)
            </summary>
        </member>
        <member name="T:de.lipowsky.LIN.Devices.BabyLin.BL_error_t">
            <summary>
            Represents a LIN error message
            </summary>
        </member>
        <member name="F:de.lipowsky.LIN.Devices.BabyLin.BL_error_t.timestamp">
            <summary>
            Time of occurence (usec, since first start of LIN activity).
            </summary>
        </member>
        <member name="F:de.lipowsky.LIN.Devices.BabyLin.BL_error_t.type">
            <summary>
            Error type.
            </summary>
        </member>
        <member name="F:de.lipowsky.LIN.Devices.BabyLin.BL_error_t.status">
            <summary>
            Status/error code.
            </summary>
        </member>
        <member name="M:de.lipowsky.LIN.Devices.BabyLin.BL_error_t.ToString">
            <summary>
            Error String extension
            </summary>
        </member>
        <member name="T:de.lipowsky.LIN.Devices.BabyLin.BL_frame_t">
            <summary>
            Carries information about one frame
            </summary>
        </member>
        <member name="F:de.lipowsky.LIN.Devices.BabyLin.BL_frame_t.extended">
            <summary>
            Set to != 0 if timing information present.
            </summary>
        </member>
        <member name="F:de.lipowsky.LIN.Devices.BabyLin.BL_frame_t.flags">
            <summary>
            Additional, informational flags
            </summary>
        </member>
        <member name="F:de.lipowsky.LIN.Devices.BabyLin.BL_frame_t.timestamp">
            <summary>
            Global time index of frame transmission start (in µsec).
            </summary>
        </member>
        <member name="F:de.lipowsky.LIN.Devices.BabyLin.BL_frame_t.breaklength">
            <summary>
            Duration of BREAK (µsec, only if extended != 0).
            </summary>
        </member>
        <member name="F:de.lipowsky.LIN.Devices.BabyLin.BL_frame_t.synctime">
            <summary>
            Time between BREAK-end and SYNC-end (µsec, only if extended != 0).
            </summary>
        </member>
        <member name="F:de.lipowsky.LIN.Devices.BabyLin.BL_frame_t.length">
            <summary>
            Length of frame (including ID byte, data bytes and checksum byte). If == 1, only the ID byte is existant (i.e. unresponded SlaveResp)!
            </summary>
        </member>
        <member name="F:de.lipowsky.LIN.Devices.BabyLin.BL_frame_t.framedata">
            <summary>
            Transmitted data, LSB first, up to length tuples.
            First value is the frame's ID (or SDF-number, if extended == 0), followed
            by the data bytes; the last value-time tuple is the checksum byte.
            
            The times are measured from the end of the previous data byte to the
            end of the current byte (all in µsec, timing information only valid if
            extended != 0):
            </summary>
        </member>
        <member name="F:de.lipowsky.LIN.Devices.BabyLin.BL_frame_t.status">
            <summary>
            Status; '0' if correctly received, error code otherwise.
            </summary>
        </member>
        <member name="M:de.lipowsky.LIN.Devices.BabyLin.BL_frame_t.ToString">
            <summary>
            Frame String extension
            </summary>
        </member>
        <member name="T:de.lipowsky.LIN.Devices.BabyLin.BL_frame_data_t">
            <summary>
            Carries the frame data.
            </summary>
        </member>
        <member name="F:de.lipowsky.LIN.Devices.BabyLin.BL_frame_data_t.value">
            <summary>
            Frame byte data value
            </summary>
        </member>
        <member name="F:de.lipowsky.LIN.Devices.BabyLin.BL_frame_data_t.time">
            <summary>
            Time in µsec if available
            </summary>
        </member>
        <member name="T:de.lipowsky.LIN.Devices.BabyLin.BL_dtl_t">
            <summary>
            Carries information about DTL protocol (both requests and responses).
            </summary>
        </member>
        <member name="F:de.lipowsky.LIN.Devices.BabyLin.BL_dtl_t.status">
            <summary>
            State of protocol frame
            </summary>
        </member>
        <member name="F:de.lipowsky.LIN.Devices.BabyLin.BL_dtl_t.nad">
            <summary>
            NAD of protocol frame
            </summary>
        </member>
        <member name="F:de.lipowsky.LIN.Devices.BabyLin.BL_dtl_t.length">
            <summary>
            Length of the data-array
            </summary>
        </member>
        <member name="F:de.lipowsky.LIN.Devices.BabyLin.BL_dtl_t.data">
            <summary>
            frame data, beginning with the (R)SID
            </summary>
        </member>
        <member name="T:de.lipowsky.LIN.Devices.BabyLin.BL_portInfo_t">
            <summary>
            Carries information about available BabyLin devices.
            </summary>
        </member>
        <member name="F:de.lipowsky.LIN.Devices.BabyLin.BL_portInfo_t.portNr">
            <summary>
            The port number that should be used with BL_open()
            </summary>
        </member>
        <member name="F:de.lipowsky.LIN.Devices.BabyLin.BL_portInfo_t.type">
            <summary>
            The type of the device
            </summary>
        </member>
        <member name="F:de.lipowsky.LIN.Devices.BabyLin.BL_portInfo_t.name">
            <summary>
            The name of the device
            </summary>
        </member>
        <member name="F:de.lipowsky.LIN.Devices.BabyLin.BL_portInfo_t.device">
            <summary>
            A description of the device
            </summary>
        </member>
        <member name="T:de.lipowsky.BLC.BabyLin">
            <summary>
            The BabyLIN DLL provide functions to read / and write the BabyLIN
            </summary>
            <summary>
            The BabyLIN DLL provide functions to read / and write the BabyLIN
            The following functions are used to get data which has been recieved from a BabyLIN-device.
            This apporach uses the pull method, i.e. you will not get any information pushed 
            ( see callback_handling "Callback Handling" ) when it's received.
            Instead you have to call these functions whenever you want to get retrieved data.
            </summary>
            <summary>
            The BabyLIN DLL provide functions to read / and write the BabyLIN
            </summary>
            <summary>
            The BabyLIN DLL provide functions to read / and write the BabyLIN
            </summary>
            <summary>
            List of functions to access the LIN-BUS directly
            </summary>
            <summary>
            The BabyLIN DLL provide functions to read / and write the BabyLIN
            </summary>
            <summary>
            The BabyLIN DLL provide functions to read / and write the BabyLIN
            </summary>
            <summary>
            The BabyLIN DLL provide functions to read / and write the BabyLIN
            </summary>
            <summary>
            The BabyLIN DLL provide functions to read / and write the BabyLIN
            </summary>
            <summary>
            The BabyLIN DLL provide functions to read / and write the BabyLIN
            The following functions are used to send commands to a BabyLIN device to set or retrieve simulation or device parameters.
            </summary>
            <summary>
            The BabyLIN DLL provide functions to read / and write the BabyLIN
            </summary>
        </member>
        <member name="F:de.lipowsky.BLC.BabyLin.BLC_OK">
            \addtogroup return_values Return Values
              \brief List of possible return values of BabyLINDLL functions
            
              The following values may be returned by BLC_ and BLC_ functions to indicate the success or failure of an operation.
              Mostly, the functions will return BLC_OK as an indicator for success. However, some functions use positive values to return the result of the function on success
             ( for example BLC_getFrameCount will return the number of frames )
            <summary>
            Function successfully completed.
            </summary>
        </member>
        <member name="F:de.lipowsky.BLC.BabyLin.BLC_PC_SIDE_ERRORS">
            <summary>
            Limit for separating BabyLIN- and PC-side errors; below there are all PC-side ones.
            </summary>
        </member>
        <member name="F:de.lipowsky.BLC.BabyLin.BLC_RESOURCE_ERROR">
            <summary>
            Internal resource allocation problem. Maybe out of memory/handles/etc.
            </summary>
        </member>
        <member name="F:de.lipowsky.BLC.BabyLin.BLC_HANDLE_INVALID">
            <summary>
            Specified handle invalid.
            </summary>
        </member>
        <member name="F:de.lipowsky.BLC.BabyLin.BLC_NO_CONNECTION">
            <summary>
            There is no connection open.
            </summary>
        </member>
        <member name="F:de.lipowsky.BLC.BabyLin.BLC_SERIAL_PORT_ERROR">
            <summary>
            Serial port couldn't be opened or closed.
            </summary>
        </member>
        <member name="F:de.lipowsky.BLC.BabyLin.BLC_CMD_SYNTAX_ERROR">
            <summary>
            BabyLIN command syntax error.
            </summary>
        </member>
        <member name="F:de.lipowsky.BLC.BabyLin.BLC_NO_ANSWER">
            <summary>
            BabyLIN doesn't answer within timeout.
            </summary>
        </member>
        <member name="F:de.lipowsky.BLC.BabyLin.BLC_FILE_ERROR">
            <summary>
            Unable to open a file.
            </summary>
        </member>
        <member name="F:de.lipowsky.BLC.BabyLin.BLC_WRONG_PARAMETER">
            <summary>
            Wrong parameter given to function.
            </summary>
        </member>
        <member name="F:de.lipowsky.BLC.BabyLin.BLC_NO_DATA">
            <summary>
            No data available upon request.
            </summary>
        </member>
        <member name="F:de.lipowsky.BLC.BabyLin.BLC_NO_SDF">
            <summary>
            No SDF was loaded previously.
            </summary>
        </member>
        <member name="F:de.lipowsky.BLC.BabyLin.BLC_DP_MSG_ERROR">
            <summary>
            Internal message format error.
            </summary>
        </member>
        <member name="F:de.lipowsky.BLC.BabyLin.BLC_SIGNAL_NOT_EXISTENT">
            <summary>
            The given signal_nr or name does not exist in loaded SDF.
            </summary>
        </member>
        <member name="F:de.lipowsky.BLC.BabyLin.BLC_SIGNAL_IS_SCALAR">
            <summary>
            The signal chosen is a scalar, but an array function was called.
            </summary>
        </member>
        <member name="F:de.lipowsky.BLC.BabyLin.BLC_SIGNAL_IS_ARRAY">
            <summary>
            The signal chosen is an array, but an scalar function was called.
            </summary>
        </member>
        <member name="F:de.lipowsky.BLC.BabyLin.BLC_SDF_INSUFFICIENT_FIRMWARE">
            <summary>
            The SDF is unsupported by connected Baby-LIN.
            </summary>
        </member>
        <member name="F:de.lipowsky.BLC.BabyLin.BLC_ENCODING_NOT_EXISTENT">
            <summary>
            The given signal has no encoding.
            </summary>
        </member>
        <member name="F:de.lipowsky.BLC.BabyLin.BLC_BUFFER_TOO_SMALL">
            <summary>
            The given buffer is too small.
            </summary>
        </member>
        <member name="F:de.lipowsky.BLC.BabyLin.BLC_NO_ANSWER_DATA">
            <summary>
            There is no additional answer data present from last sendCommand-call.
            </summary>
        </member>
        <member name="F:de.lipowsky.BLC.BabyLin.BLC_ANSWER_DATA_NOT_EXISTENT">
            <summary>
            Additional data with given index/name not present.
            </summary>
        </member>
        <member name="F:de.lipowsky.BLC.BabyLin.BLC_NO_CHANNELS_AVAILABLE">
            <summary>
            Device Supported no Channels.
            </summary>
        </member>
        <member name="F:de.lipowsky.BLC.BabyLin.BLC_UNKNOWN_COMMAND">
            <summary>
            Unknown command passed to sendCommand.
            </summary>
        </member>
        <member name="F:de.lipowsky.BLC.BabyLin.BLC_TIMEOUT">
            <summary>
            A sendCommand message timed out.
            </summary>
        </member>
        <member name="F:de.lipowsky.BLC.BabyLin.BLC_SDF_INCOMPATIBLE">
            <summary>
            The sdf can not be loaded to a the device due to incompatibibility ( incompatible SDFV3 to SDFV2 device ).
            </summary>
        </member>
        <member name="F:de.lipowsky.BLC.BabyLin.SDF_OK">
            <summary>
            Function successfully completed.
            </summary>
        </member>
        <member name="F:de.lipowsky.BLC.BabyLin.SDF_HANDLE_INVALID">
            <summary>
            The value passed as a SDF handle is not valid.
            </summary>
        </member>
        <member name="F:de.lipowsky.BLC.BabyLin.SDF_IN_USE">
            <summary>
            The sdf can not be unloaded as the SDF is in use on a device.
            </summary>
        </member>
        <member name="M:de.lipowsky.BLC.BabyLin.BLC_getVersion(System.Int32@,System.Int32@)">
            <summary>
            Get the major and minor version number of the library.
            
            This function retreives the version in the given parameter variables of the
            library.
            </summary>
            <param name="major">major part of version number.</param>
            <param name="minor">minor part of version number.</param>
        </member>
        <member name="M:de.lipowsky.BLC.BabyLin.BLC_getExtendedVersion(System.Int32@,System.Int32@,System.Int32@,System.Int32@)">
            <summary>
            Get the major, minor and patch version number of the library.
            
            This function retreives the version in the given parameter variables of the
            library.
            </summary>
            <param name="major">major part of version number.</param>
            <param name="minor">minor part of version number.</param>
            <param name="patch">patch part of version number.</param>
            <param name="buildrev">build revision of version number.</param>
        </member>
        <member name="M:de.lipowsky.BLC.BabyLin.BLC_getVersionString">
            <summary>
            Get the version string of the library.
            
            This function returns the version string of the library.
            </summary>
            <returns>returns a C-string with the version information.</returns>
        </member>
        <member name="M:de.lipowsky.BLC.BabyLin.BLC_getBabyLinPorts(de.lipowsky.BLC.BabyLin.BLC_portInfo_t[],System.Int32@)">
            <summary>
            Retrieve a list of ports a BabyLIN is connected to.
            
            The function doesn't try to connect to the found Ports
            wraps BLC_getBabyLinPortsTimout with timout value set to 1000ms
            </summary>
            <param name="portListToBeFilled">array to be filled</param>
            <param name="pFoundPortCount">the length of the array to be filled</param>
            <returns>the number of connected BabyLINs found (&gt;=0) or &lt; 0 on error</returns>
        </member>
        <member name="M:de.lipowsky.BLC.BabyLin.BLC_getBabyLinPortsTimout(de.lipowsky.BLC.BabyLin.BLC_portInfo_t[],System.Int32@,System.Int32)">
            <summary>
            Retrieve a list of ports a BabyLIN is connected to.
            
            The function doesn't try to connect to the found Ports
            </summary>
            <param name="portListToBeFilled">array to be filled</param>
            <param name="pFoundPortCount">the length of the array to be filled</param>
            <param name="timeoutms">a timeout value in ms to wait for replies of network devices</param>
            <returns>the number of connected BabyLINs found (&gt;=0) or &lt; 0 on error</returns>
        </member>
        <member name="M:de.lipowsky.BLC.BabyLin.BLC_open(System.Int32)">
             <summary>
             Open a connection to a BabyLIN USB-Serial device.
            
             This function tries to open the designated port and to start communication
             with the device.
             </summary>
             <param name="port">
             the port, the BabyLIN is connected to. It uses Windows-style numbering,
             which means it starts with '1' for the first serial port.
             '0' is reserved.
             On linux systems, the port is represented by the path to the device file ("/dev/ttyUSB0" f.ex.)
             </param>
             <returns>
             Returns an handle for the BabyLIN-connection or NULL if the connection could not be established.
             You may fetch the corresponding (textual) error with BLC_getLastError.
             </returns>
        </member>
        <member name="M:de.lipowsky.BLC.BabyLin.BLC_openNet(System.String,System.Int32)">
            <summary>
            Open a connection to a BabyLIN device using ethernet.
            
            This function tries to open the designated ip and port and to start communication
            with the device.
            </summary>
            <param name="ip">the ip-address of the BabyLIN to connect to</param>
            <param name="port">the ip-port of the BabyLIN toconnected to</param>
            <returns>
            Returns an handle for the BabyLIN-connection or NULL if the connection could not be established.
            you may fetch the corresponding (textual) error with BLC_getLastError.
            </returns>
        </member>
        <member name="M:de.lipowsky.BLC.BabyLin.BLC_openUSB(System.String)">
            <summary>
            Open a connection to a BabyLIN USB device.
            
            This function tries to open the designated port and to start communication
            with the device.
            </summary>
            <param name="device">the usb device string, the BabyLIN is connected to.</param>
            <returns>
            Returns an handle for the BabyLIN-connection or NULL if the connection could not be established.
            You may fetch the corresponding (textual) error with BLC_getLastError.
            </returns>
        </member>
        <member name="M:de.lipowsky.BLC.BabyLin.BLC_openPort(de.lipowsky.BLC.BabyLin.BLC_portInfo_t)">
            <summary>
            Open a connection to a BabyLIN device using BLC_PORTINFO information.
            
             This function tries to open the BabyLIN device of the BLC_PORTINFO information, i.e. works as a wrapper for
            BLC_open and BLC_openNet which automatically decides which connection to establish.
            
            latform independent way of connecting to BabyLIN-devices found by BLC_getBabyLinPorts or BLC_getBabyLinPortsTimout
            </summary>
            <param name="portInfo">the BLC_PORTINFO-structure of the BabyLIN to connect to ( see BLC_getBabyLinPorts )</param>
            <returns>
            Returns an handle for the BabyLIN-connection or NULL if the connection could not be established.
            You may fetch the corresponding (textual) error with BLC_getLastError.
            </returns>
        </member>
        <member name="M:de.lipowsky.BLC.BabyLin.BLC_close(System.IntPtr)">
            <summary>
            Close connection to Device.
            
            close an open connection, given by handle.
            </summary>
            <param name="handle">Handle representing the connection ( see BLC_open )</param>
            <returns>
            Status of operation; '=0' means successful, '!=0' otherwise.
            See standard return values for error, or for textual
            representation  BLC_getLastError.
            </returns>
        </member>
        <member name="M:de.lipowsky.BLC.BabyLin.BLC_closeAll">
             <summary>
             Close ALL connections to ALL Devices.
            
             close all open connections all handles are invalidated
             </summary>
             <returns>
             Status of operation; '=0' means successful, '!=0' otherwise.
             See standard return values for error, or for textual
             representation  BLC_getLastError.
             </returns>
        </member>
        <member name="M:de.lipowsky.BLC.BabyLin.BLC_flush(System.IntPtr)">
            <summary>
            Reset the BabyLIN device to an consistent and deactivated state.
            
            Afterwards, the device will no longer monitor the bus, neither acting as slave
            nor as master.
            </summary>
            <param name="handle">Handle representing a channel; returned previously by BLC_getChannelHandle().</param>
            <returns>
            Status of operation; '=0' means successful, '!=0' otherwise.
            See standard return values for error, or for textual
            representation (for return values &lt; -1000) BLC_getLastError.
            </returns>
        </member>
        <member name="M:de.lipowsky.BLC.BabyLin.BLC_getTargetID(System.IntPtr,de.lipowsky.BLC.BabyLin.BLC_targetid_t@)">
            <summary>
            Requests the information about the target
            </summary>
            <param name="handle">Handle representing the connection (see BLC_open )</param>
            <param name="targetID">
            pointer to pre-allocated BLC_TARGETID structure to hold the information
            after the successful call
            </param>        
            <returns>
            Status of operation; '=0' means successful, '!=0' otherwise.
            See standard return values for error, or for textual
            representation (for return values &lt; -1000) BLC_getLastError.
            </returns>
        </member>
        <member name="M:de.lipowsky.BLC.BabyLin.BLC_getHWType(System.IntPtr)">
            <summary>
            Returns the unique hardware type identifier for a device
            </summary>
            <param name="handle">Handle representing the connection ( see BLC_open )</param>
            <returns>
            The hardware type or BabyLIN-error return code. See (BLC_TARGETID.type) for hardware types.
            See standard return values for error, or for textual
            representation (for return values &lt; -1000) BLC_getLastError.
            </returns>
        </member>
        <member name="M:de.lipowsky.BLC.BabyLin.BLC_getChannelCount(System.IntPtr)">
            <summary>
            number of channels provided by the BabyLIN-Device
            </summary>
            <param name="handle">Handle representing the connection (see BLC_open)</param>
            <returns>
            number of channels &gt;= 0 or &lt; 0 on error.
            See standard return values for error, or for textual
            representation (for return values &lt; -1000) BLC_getLastError.
            </returns>
        </member>
        <member name="M:de.lipowsky.BLC.BabyLin.BLC_getChannelHandle(System.IntPtr,System.Int32)">
            <summary>
            Retrieve a handle to the specified channel
            
            This function returns a channel-handle for the specified channelId.
            A channel-handle is used to control a LIN- or CAN-BUS on the BabyLIN-device.
            </summary>
            <param name="handle">Handle representing the Device connection ( see BLC_open )</param>
            <param name="channelId">
            channelId Identifier for the channel to get the handle of.
            Ranges from 0 to the number of channels supported by the device (see BLC_getChannelCount)
            </param>
            <returns>
            handle to the channel, 0 on error
            You may fetch the corresponding (textual) with BLC_getLastError.
            </returns>
        </member>
        <member name="M:de.lipowsky.BLC.BabyLin.BLC_getChannelInfo(System.IntPtr,de.lipowsky.BLC.BabyLin.BLC_channelInfo_t@)">
            <summary>
            Retrieve informations about the Channel
            </summary>
            <param name="handle">Channelhandle representing the Channel. (see BLC_getChannelHandle)</param>
            <param name="pinfo">
            pointer to pre-allocated BLC_CHANNELINFO structure to hold the information
            after the successful call
            </param>
            <returns>
            Status of operation; '=0' means successful, '!=0' otherwise.
            See standard return values for error, or for textual
            representation (for return values &lt; -1000) BLC_getLastError.
            </returns>
        </member>
        <member name="M:de.lipowsky.BLC.BabyLin.BLC_getLastError(System.IntPtr)">
            <summary>
            Returns a C-string with the textual representation of the last error.
            
            Get a textual error message for Errorcodes &lt; -1000.
            </summary>
            <param name="handle">Handle to the erroneous connection or channel.</param>
            <returns> String with textual representation of the last error</returns>
        </member>
        <member name="M:de.lipowsky.BLC.BabyLin.BLC_Reset(System.IntPtr)">
            <summary>
            Resets the BabyLIN device to an consistent and deactivated state.
            
            Afterwards, the device will no longer monitor the bus, neither acting as slave
            nor as master.
            </summary>
            <param name="handle">Handle representing the connection. (see BLC_open )</param>
            <returns>
            Status of operation; '=0' means successful, '!=0' otherwise.
            See standard return values for error, or for textual
            representation (for return values &lt; -1000) BLC_getLastError.
            </returns>
        </member>
        <member name="M:de.lipowsky.BLC.BabyLin.BLC_getLastFrame(System.IntPtr,System.Int32,de.lipowsky.BLC.BabyLin.BLC_frame_t@)">
            <summary>
            Retrieve the last framedata available for a frame.
            
            Important: The Baby-LIN fills the receiver queue only if command "disframe" sent before ( see babylin_commands )
            </summary>
            <param name="handle">Handle representing the channel to get the frame data from (see BLC_getChannelHandle )</param>
            <param name="frameNr">Zero based index of requested frame entry.</param>
            <param name="framedata">Pointer to a pre-allocated BLC_FRAME structure.</param>
            <returns>
            Status of operation; '=0' means successful, '!=0' otherwise.
            See standard return values for error, or for textual
            representation (for return values &lt; -1000) BLC_getLastError.
            </returns>
        </member>
        <member name="M:de.lipowsky.BLC.BabyLin.BLC_getNextFrame(System.IntPtr,de.lipowsky.BLC.BabyLin.BLC_frame_t@)">
            <summary>
            Fetches the next frame on Channel from the receiver queue.
            
            Important: The Device fills the receiver queue only if command "disframe" sent before.
            </summary>
            <param name="handle">Handle representing the channel to get the frame data from (see BLC_getChannelHandle )</param>
            <param name="framedata">Pointer to a pre-allocated BLC_FRAME structure.</param>
            <returns>
            Status of operation; '=0' means successful, '!=0' otherwise.
            See standard return values for error, or for textual
            representation (for return values &lt; -1000) BLC_getLastError.
            </returns>
        </member>
        <member name="M:de.lipowsky.BLC.BabyLin.BLC_getNextFrames(System.IntPtr,de.lipowsky.BLC.BabyLin.BLC_frame_t[],System.Int32@)">
            <summary>
            Fetches the next frames on channel from the receiver queue.
            
            Important: The device fills the receiver queue only if command "disframe" sent before.
            </summary>
            <param name="handle">Handle representing the channel to get the frame data from (see BLC_getChannelHandle )</param>
            <param name="framedata">Pointer to a pre-allocated BLC_FRAME (structure) array.</param>
            <param name="size">
            Input/Output parameter. On input, size of the pre-allocated BLC_FRAME (structure) array,
            in units of BLC_FRAME, which must be a positive value.
            On output, the actual number of retrieved BLC_FRAMEs, which might be less
            than *size on input.
            </param>
            <returns>
            Status of operation; '=0' means successful, '!=0' otherwise.
            See standard return values for error, or for textual
            representation (for return values &lt; -1000) BLC_getLastError.
            </returns>
        </member>
        <member name="M:de.lipowsky.BLC.BabyLin.BLC_getNextFrameTimeout(System.IntPtr,de.lipowsky.BLC.BabyLin.BLC_frame_t@,System.Int32)">
            <summary>
            Fetches the next frame on Channel from the receiver queue with wait-timeout.
            
            Retrieves the next frame received from the BabyLIN.
            If no frame-data is available, the funktion will wait _up to_ timeout_ms milliseconds
            for new data before it returns with a BL_TIMEOUT returncode
            Important: The Device fills the receiver queue only if command "disframe" sent before.
            </summary>
            <param name="handle">Handle representing the channel to get the frame data from (see BLC_getChannelHandle )</param>
            <param name="framedata">Pointer to a pre-allocated BLC_frame_t structure.</param>
            <param name="timeout_ms">timout to wait for new framedata</param>
            <returns>
            Status of operation; '=0' means successful, '!=0' otherwise.
            See standard return values for error, or for textual
            representation (for return values &lt; -1000) BLC_getLastError.
            </returns>
        </member>
        <member name="M:de.lipowsky.BLC.BabyLin.BLC_getNextFramesTimeout(System.IntPtr,de.lipowsky.BLC.BabyLin.BLC_frame_t[],System.Int32,System.Int32@)">
            <summary>
            Fetches the next frames on channel from the receiver queue with wait-timeout.
            
            Retrieves the next frames received from the BabyLIN.
            If no frame-data is available, the funktion will wait _up to_ timeout_ms milliseconds
            for new data before it returns with a BL_TIMEOUT returncode
            Important: The Device fills the receiver queue only if command "disframe" sent before.
            </summary>
            <param name="handle">Handle representing the channel to get the frame data from (see BLC_getChannelHandle )</param>
            <param name="framedata">Pointer to a pre-allocated BLC_FRAME structure.</param>
            <param name="timeout_ms">timout to wait for new framedata</param>
            <param name="size">
            Input/Output parameter. On input, size of the pre-allocated BLC_FRAME (structure) array,
            in units of BLC_FRAME, which must be a positive value.
            On output, the actual number of retrieved BLC_FRAMEs, which might be less
            than *size on input.
            </param>
            <returns>
            Status of operation; '=0' means successful, '!=0' otherwise.
            See standard return values for error, or for textual
            representation (for return values &lt; -1000) BLC_getLastError.
            </returns>
        </member>
        <member name="M:de.lipowsky.BLC.BabyLin.BLC_getNextSignal(System.IntPtr,de.lipowsky.BLC.BabyLin.BLC_signal_t@)">
            <summary>
            Fetches the next signal from the receiver queue.
            
            Important: The Baby-LIN fills the receiver queue only if command "dissignal" sent before.
            </summary>
            <param name="handle">Handle representing the channel to get the signal data from (see BLC_getChannelHandle )</param>
            <param name="signaldata">Pointer to a pre-allocated BLC_SIGNAL structure.</param>
            <returns>
            Status of operation; '=0' means successful, '!=0' otherwise.
            See standard return values for error, or for textual
            representation (for return values &lt; -1000) BLC_getLastError.
            </returns>
        </member>
        <member name="M:de.lipowsky.BLC.BabyLin.BLC_getNextSignals(System.IntPtr,de.lipowsky.BLC.BabyLin.BLC_signal_t[],System.Int32@)">
            <summary>
            Fetches the next signals from the receiver queue.
            
            Important: The Baby-LIN fills the receiver queue only if command "dissignal" sent before.
            </summary>
            <param name="handle">Handle representing the channel to get the signal data from (see BLC_getChannelHandle )</param>
            <param name="signaldata">Pointer to a pre-allocated BLC_SIGNAL (structure) array.</param>
            <param name="size">
            Input/Output parameter. On input, size of the pre-allocated BLC_SIGNAL (structure) array,
            in units of BLC_SIGNAL, which must be a positive value.
            On output, the actual number of retrieved BLC_SIGNALs, which might be less
            than *size on input.
            </param>
            <returns>
            Status of operation; '=0' means successful, '!=0' otherwise.
            See standard return values for error, or for textual
            representation (for return values &lt; -1000) BLC_getLastError.
            </returns>
        </member>
        <member name="M:de.lipowsky.BLC.BabyLin.BLC_getNextSignalsForNumber(System.IntPtr,de.lipowsky.BLC.BabyLin.BLC_signal_t[],System.Int32,System.Int32)">
             <summary>
             Fetches the next signals for a specific signal from the receiver queue.
            
             Important: The Baby-LIN fills the receiver queue only if command "dissignal" sent before.
             Important: This function will remove the signal values from the queue. Further signal receiving is no longer guaranteed to be in order.
             </summary>
             <param name="handle">Handle representing the channel to get the signal data from (see BLC_getChannelHandle )</param>
             <param name="signaldata">Pointer to a pre-allocated BLC_SIGNAL (structure) array.</param>
             <param name="size">
             Size of the pre-allocated BLC_SIGNAL (structure) array,
             in units of BLC_SIGNAL, which must be a positive value.
             </param>
             <param name="signalNumber">the signal number to get the signals for</param>
             <returns>
             number of signals found; '&lt;0' on error.
             See standard return values for error, or for textual
             representation (for return values &lt; -1000) BLC_getLastError.
             </returns>
        </member>
        <member name="M:de.lipowsky.BLC.BabyLin.BLC_getNextBusError(System.IntPtr,de.lipowsky.BLC.BabyLin.BLC_error_t@)">
            <summary>
            Fetches the next Bus error from the receiver queue.
            </summary>
            <param name="handle">Handle representing the channel to get the error data from (see BLC_getChannelHandle )</param>
            <param name="errordata">Pointer to a pre-allocated BL_error_t structure.</param>
            <returns>
            Status of operation; '=0' means successful, '!=0' otherwise.
            See standard return values for error, or for textual
            representation (for return values &lt; -1000) BLC_getLastError.
            </returns>
        </member>
        <member name="M:de.lipowsky.BLC.BabyLin.BLC_getNextDTLRequest(System.IntPtr,de.lipowsky.BLC.BabyLin.BLC_dtl_t@)">
            <summary>
            Fetches the next complete DTL request from the receiver queue.
            </summary>
            <param name="handle">Handle representing the channel to get the dtl data from (see BLC_getChannelHandle )</param>
            <param name="frame">Pointer to a pre-allocated BLC_DTL structure.</param>
            <returns>
            Status of operation; '=0' means successful, '!=0' otherwise.
            See standard return values for error, or for textual
            representation (for return values &lt; -1000) BLC_getLastError.
            </returns>
        </member>
        <member name="M:de.lipowsky.BLC.BabyLin.BLC_getNextDTLResponse(System.IntPtr,de.lipowsky.BLC.BabyLin.BLC_dtl_t@)">
            <summary>
            Fetches the next complete DTL response from the receiver queue.
            </summary>
            <param name="handle">Handle representing the channel to get the dtl data from (see BLC_getChannelHandle )</param>
            <param name="frame">Pointer to a pre-allocated BL_dtl_t structure.</param>
            <returns>
            Status of operation; '=0' means successful, '!=0' otherwise.
            See standard return values for error, or for textual
            representation (for return values &lt; -1000) BLC_getLastError.
            </returns>
        </member>
        <member name="M:de.lipowsky.BLC.BabyLin.BLC_getSignalValue(System.IntPtr,System.Int32,System.UInt64@)">
             <summary>
             Return the current signal value (for non-array signals).
             Important: The Baby-LIN reports the signal value only if command "dissignal" sent before.
            
             Note: Special signalNr '-1' returns always 4711 in *value; signalNr '-2' returns a counter
             increased by 1 after every call.
             </summary>
             <param name="handle">Handle representing the channel to get the signal value from (see BLC_getChannelHandle )</param>
             <param name="signalNr">Number of the signal according to SDF.</param>
             <param name="value">Pointer to an word-sized variable getting the value.</param>
             <returns>
             Status of operation; '=0' means successful, '!=0' otherwise.
             See standard return values for error, or for textual
             representation (for return values &lt; -1000) BLC_getLastError.
             </returns>
        </member>
        <member name="M:de.lipowsky.BLC.BabyLin.BLC_getSignalValueWithTimestamp(System.IntPtr,System.Int32,System.UInt64@,System.UInt64@)">
            <summary>
            Return the current signal value (for non-array signals) with timestamp.
            Important: The Baby-LIN reports the signal value only if command "dissignal" sent before.
            
            Note: Special signalNr '-1' returns always 4711 in *value; signalNr '-2' returns a counter
            increased by 1 after every call.
            </summary>
            <param name="handle">Handle representing the channel to get the signal value from (see BLC_getChannelHandle )</param>
            <param name="signalNr">Number of the signal according to SDF.</param>
            <param name="value">Pointer to an word-sized variable getting the value.</param>
            <param name="timestamp">Pointer to an word-sized variable getting the timestamp when the signal was received (PC-Timestamp).</param>
            <returns>
            Status of operation; '=0' means successful, '!=0' otherwise.
            See standard return values for error, or for textual
            representation (for return values &lt; -1000) BLC_getLastError.
            </returns>
        </member>
        <member name="M:de.lipowsky.BLC.BabyLin.BLC_getSignalValueByName(System.IntPtr,System.String,System.UInt64@)">
            <summary>
            Returns the current signal value (for non-array signals).
            
            Important: The Baby-LIN reports the signal value only if command "dissignal" sent before.
            </summary>
            <param name="handle">Handle representing the channel to get the signal value from (see BLC_getChannelHandle )</param>
            <param name="signalName">Name of the Signal as declared in LDF.</param>
            <param name="value">Pointer to an word-sized variable getting the value.</param>
            <returns>
            Status of operation; '=0' means successful, '!=0' otherwise.
            See standard return values for error, or for textual
            representation (for return values &lt; -1000) BLC_getLastError.
            </returns>
        </member>
        <member name="M:de.lipowsky.BLC.BabyLin.BLC_getSignalArray(System.IntPtr,System.Int32,System.Byte[])">
            <summary>
            Returns the current signal value (for array signals).
            Important: The Baby-LIN reports the signal value only if command "dissignal" sent before.
            Note: Special signalNr '-1' returns always the hex array { 0x01, 0x23, 0x45, 0x67, 0x89, 0xab, 0xcd, 0xef } in *array;
            signalNr '-2' returns a counted sequence, where the byte 0 holds the actual counter and the following bytes hold
            the 'history'; i.e.:
            
            1st call: { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }
            
            2nd call: { 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }
            
            3rd call: { 0x02, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }
            
            4th call: { 0x03, 0x02, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00 }
            
            ...etc...
            </summary>
            <param name="handle">Handle representing the channel to get the signal value from (see BLC_getChannelHandle )</param>
            <param name="signalNr">Number of the signal accordng to SDF.</param>
            <param name="array">
            Pointer to an 8 byte array getting the value. It must always have the size
            of 8 bytes, even for smaller array signals!
            </param>
            <returns>
            Status of operation; '=0' means successful, '!=0' otherwise.
            See standard return values for error, or for textual
            representation (for return values &lt; -1000) BLC_getLastError.
            </returns>
        </member>
        <member name="M:de.lipowsky.BLC.BabyLin.BLC_getSignalArrayWithTimestamp(System.IntPtr,System.Int32,System.Byte[],System.UInt64@)">
            <summary>
            Returns the current signal value (for array signals) with timstamp.
            Important: The Baby-LIN reports the signal value only if command "dissignal" sent before.
            Note: Special signalNr '-1' returns always the hex array { 0x01, 0x23, 0x45, 0x67, 0x89, 0xab, 0xcd, 0xef } in *array;
            signalNr '-2' returns a counted sequence, where the byte 0 holds the actual counter and the following bytes hold
            the 'history'; i.e.:
            
            1st call: { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }
            
            2nd call: { 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }
            
            3rd call: { 0x02, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }
            
            4th call: { 0x03, 0x02, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00 }
            
            ...etc...
            </summary>
            <param name="handle">Handle representing the channel to get the signal value from (see BLC_getChannelHandle )</param>
            <param name="signalNr">Number of the signal accordng to SDF.</param>
            <param name="array">
            Pointer to an 8 byte array getting the value. It must always have the size
            of 8 bytes, even for smaller array signals!
            </param>
            <param name="timestamp">Pointer to an word-sized variable getting the timestamp when the signal was received (PC-Timestamp).</param>
            <returns>
            Status of operation; '=0' means successful, '!=0' otherwise.
            See standard return values for error, or for textual
            representation (for return values &lt; -1000) BLC_getLastError.
            </returns>
        </member>
        <member name="M:de.lipowsky.BLC.BabyLin.BLC_getSignalArrayByName(System.IntPtr,System.String,System.Byte[])">
            <summary>
            Returns the current signal value (for array signals).
            
            Important: The Baby-LIN reports the signal value only if command "dissignal" sent before.
            </summary>
            <param name="handle">Handle representing the channel to get the signal value from (see BLC_getChannelHandle )</param>
            <param name="signalName">Name of the Signal as declared in LDF.</param>
            <param name="array">
            Pointer to an 8 byte array getting the value. It must always have the size
            of 8 bytes, even for smaller array signals!
            </param>
            <returns>
            Status of operation; '=0' means successful, '!=0' otherwise.
            See standard return values for error, or for textual
            representation (for return values &lt; -1000) BLC_getLastError.
            </returns>
        </member>
        <member name="M:de.lipowsky.BLC.BabyLin.BLC_isSignalArray(System.IntPtr,System.Int32)">
            <summary>
            Returns the type of a signal
            </summary>
            <param name="handle">Handle representing the channel to which the signal belongs (see BLC_getChannelHandle )</param>
            <param name="idx">Zero based index of requested signal entry.</param>
            <returns>
            Status of operation; Signal is Array == 1; Signal is scalar Value == 0.
            Values &lt;0 on error.
            See standard return values for error, or for textual
            representation (for return values &lt; -1000) BLC_getLastError.
            </returns>
        </member>
        <member name="M:de.lipowsky.BLC.BabyLin.BLC_encodeSignal(System.IntPtr,System.Int32,System.UInt64,System.String@,System.String@)">
            <summary>
            Encodes the signal's value as defined in the corresponding Signal Encoding tables of LDF/SDF.
            
            If no SignalEncoding is specified for this signal, the value itself is written into destination buffer 'description'.
            If one of the required pointers is NULL or the buffer size is too small, the function returns the needed minimum buffer
            length in 'length'.
            It's possible to use two variants to get encoded signal:
              1) pointer 'encUnit' and 'buffLen1' set to NULL: then encoded signal saved inclusive unit in buffer 'encSignal'
              2) pointer 'encUnit' and 'buffLen1' != NULL: unit of signal saved separately in buffer 'encUnit'
            </summary>
            <param name="handle">Handle representing the channel to which the signal belongs (see BLC_getChannelHandle )</param>
            <param name="signalNr">Number (Index) of the signal accordng to SDF.</param>
            <param name="value">Value to be encoded</param>
            <param name="encSignal">points to save location of encoded signal value (inclusive 'unit', if 'encUnit' not used)</param>
            <param name="encUnit">optional: points to save location of signal unit (if this pointer is NULL then 'unit' saved in 'encSignal' buffer also)</param>
            <returns>
            Status of operation; '=0' means successful, '!=0' otherwise.
            See standard return values for error, or for textual
            representation (for return values &lt; -1000) BLC_getLastError.
            </returns>
        </member>
        <member name="M:de.lipowsky.BLC.BabyLin.BLC_getSignalsInFrame(System.IntPtr,System.Int32,de.lipowsky.BLC.BabyLin.BLC_signal_t[],System.Int32)">
            <summary>
            Get values of all signals mapped to a frame
            </summary>
            <param name="handle">Handle representing the channel to which the frame belongs (see BLC_getChannelHandle )</param>
            <param name="frameNr">frame number (according to SDF) to get the signal data from</param>
            <param name="signalList">pre-allocated array of BLC_SIGNAL structures to store the signal data to</param>
            <param name="signalListLen">length of the pre-allocated array of BLC_SIGNAL structures</param>
            <returns>
            the number of signals stored to signalList.
            Values &lt;0 on error.
            See standard return values for error, or for textual
            representation (for return values &lt; -1000) BLC_getLastError.
            </returns>
        </member>
        <member name="M:de.lipowsky.BLC.BabyLin.BLC_SDF_getNodeNr(System.IntPtr,System.String)">
            <summary>
            Get the SDF's number for node by name.
            </summary>
            <param name="handle">Handle representing the connection; returned previously by getChannelHandle().</param>
            <param name="name">Name of the node.</param>
            <returns>Returns the node's number or -1 if there's no signal with
            specified name. Even smaller numbers designate error codes
            as defined in BabyLIN.h.</returns>
        </member>
        <member name="M:de.lipowsky.BLC.BabyLin.BLC_SDF_getSignalNr(System.IntPtr,System.String)">
            <summary>
            Get the SDF's number for signal by name.
            </summary>
            <param name="handle">Handle representing the connection; returned previously by getChannelHandle().</param>
            <param name="name">Name of the signal.</param>
            <returns>Returns the signal's number or -1 if there's no signal with
            specified name. Even smaller numbers designate error codes
            as defined in BabyLIN.h.</returns>
        </member>
        <member name="M:de.lipowsky.BLC.BabyLin.BLC_SDF_getFrameNr(System.IntPtr,System.String)">
            <summary>
            Get the SDF's number for frame by name.
            </summary>
            <param name="handle">Handle representing the connection; returned previously by getChannelHandle().</param>
            <param name="name">Name of the frame.</param>
            <returns>Returns the frame's number or -1 if there's no frame with
            specified name. Even smaller numbers designate error codes
            as defined in BabyLIN.h.</returns>
        </member>
        <member name="M:de.lipowsky.BLC.BabyLin.BLC_SDF_getScheduleNr(System.IntPtr,System.String)">
            <summary>
            Get the SDF's number for schedule by name.
            </summary>
            <param name="handle">Handle representing the connection; returned previously by getChannelHandle().</param>
            <param name="name">Name of the schedule.</param>
            <returns>Returns the schedule's number or -1 if there's no schedule with
            specified name. Even smaller numbers designate error codes
            as defined in BabyLIN.h.</returns>
        </member>
        <member name="M:de.lipowsky.BLC.BabyLin.BLC_SDF_getNumSchedules(System.IntPtr)">
            <summary>
            Get the number of schedule tables in the SDF.
            </summary>
            <param name="handle">Handle representing the connection; returned previously by getChannelHandle().</param>
            <returns>
            Returns the number of schedule tablesname or 0 if there's no schedule defined.
            </returns>
        </member>
        <member name="M:de.lipowsky.BLC.BabyLin.BLC_SDF_getScheduleName(System.IntPtr,System.Int32)">
            <summary>
            Get the SDF's name of schedule by number.
            </summary>
            <param name="handle">Handle representing the connection; returned previously by getChannelHandle().</param>
            <param name="schedule_nr">Index of the schedule.</param>
            <returns>Returns the schedule's number or -1 if there's no schedule with
            specified name. Even smaller numbers designate error codes
            as defined in BabyLIN.h.</returns>
        </member>
        <member name="M:de.lipowsky.BLC.BabyLin.BLC_SDF_getMacroNr(System.IntPtr,System.String)">
            <summary>
            Get the SDF's number for macro by name.
            </summary>
            <param name="handle">Handle representing the connection; returned previously by getChannelHandle().</param>
            <param name="name">Name of the macro.</param>
            <returns>Returns the macro's number or -1 if there's no macro with
            specified name. Even smaller numbers designate error codes
            as defined in BabyLIN.h.</returns>
        </member>
        <member name="M:de.lipowsky.BLC.BabyLin.BLC_loadSDF(System.IntPtr,System.String,System.Int32)">
             <summary>
             Loads the specified SDF-file into library and optionally the BabyLIN device.
            
             The SDF is generated by LINWorks/SessionConf from a LDF file.
             Warning: this resets the device upon download
             </summary>
             <param name="handle">Handle representing the connection. (see BLC_open )</param>
             <param name="filename">
             C-string with the (fully qualified) filename (i.e. "mybus.sdf", if
             in the same directory, or "c:/data/mybus.sdf").
             </param>
             <param name="download">
             boolean value, determines if the SDF profile gets downloaded into
             the BabyLIN device (!=0) or only used in the library (=0).
             </param>
             <returns>
             Status of operation; '=0' means successful, '!=0' otherwise.
             See standard return values for error, or for textual
             representation (for return values &lt; -1000) BLC_getLastError.
             </returns>
        </member>
        <member name="M:de.lipowsky.BLC.BabyLin.BLC_loadLDF(System.IntPtr,System.String,System.Int32)">
            <summary>
            Loads the specified LDFile into library and optionally the BabyLIN device.
            
            Loads a given LDF, converts the LDF to a SDF ( without SDF specific features ) and optionally downloads the generated SDF to the device
            Warning: this resets the device upon download
            </summary>
            <param name="handle">Handle representing the connection. (see BLC_open )</param>
            <param name="filename">
            C-string with the (fully qualified) filename (i.e. "mybus.ldf", if
            in the same directory, or "c:/data/mybus.ldf").
            </param>
            <param name="download">
            boolean value, determines if the generated SDF profile gets downloaded into
            the BabyLIN device (!=0) or only used in the library (=0).
            </param>
            <returns>
            Status of operation; '=0' means successful, '!=0' otherwise.
            See standard return values for error, or for textual
            representation (for return values &lt; -1000) BLC_getLastError.
            </returns>
        </member>
        <member name="M:de.lipowsky.BLC.BabyLin.BLC_downloadSDF(System.IntPtr,System.Int32)">
            <summary>
            Loads the previously loaded SDF-file into the BabyLIN device.
            
            The SDF could be generated by LINWorks/SessionConf from a LDF file and must have been
            loaded previously by an BL_loadSDF() command.
            Warning: this resets the device!
            </summary>
            <param name="handle">Handle representing the connection. (see BLC_open )</param>
            <param name="mode"></param>
            <returns>
            Status of operation; '=0' means successful, '!=0' otherwise.
            See standard return values for error, or for textual
            representation (for return values &lt; -1000) BLC_getLastError.
            </returns>
        </member>
        <member name="M:de.lipowsky.BLC.BabyLin.BLC_getSDFInfo(System.IntPtr,de.lipowsky.BLC.BabyLin.BLC_sdfInfo_t@)">
            <summary>
            Retrieve further Information about a loaded SDF
            
            Need a loaded SDF (see BLC_loadSDF or BLC_loadLDF )
            </summary>
            <param name="handle">handle to a valid connection</param>
            <param name="pSDFInfo">points to a pre-allocated BLC_SDFINFO to be filled with information</param>
            <returns>
            Status of operation; '=0' means successful, '!=0' otherwise.
            See standard return values for error, or for textual
            representation (for return values &lt; -1000) BLC_getLastError.
            </returns>
        </member>
        <member name="M:de.lipowsky.BLC.BabyLin.BLC_getSectionInfo(System.IntPtr,System.Int32,de.lipowsky.BLC.BabyLin.BLC_sectionInfo_t@)">
            <summary>
            Retrieve informations about a SDF-Section from a loaded SDF
            </summary>
            <param name="handle">handle of a valid connection</param>
            <param name="infoAboutSectionNr">
            the section number to retrieve information of.
            Ranges from 0 to the number of sections in the loaded SDF (see BLC_getSDFInfo and BLC_SDFINFO.sectionCount )
            </param>
            <param name="pSectionInfo">address of a pre-allocated BLC_SECTIONINFO</param>
            <returns>
            Status of operation; '=0' means successful, '!=0' otherwise.
            See standard return values for error, or for textual
            representation (for return values &lt; -1000) BLC_getLastError.
            </returns>
        </member>
        <member name="M:de.lipowsky.BLC.BabyLin.BLC_getChannelSectionDescription(System.IntPtr)">
            <summary>
            Retrieve description string of a SDF-Section from a loaded SDF
            </summary>
            <param name="handle">handle of the channel to get the sdf section description of</param>
            <returns>sdf section description</returns>
        </member>
        <member name="M:de.lipowsky.BLC.BabyLin.BLC_getNodeCount(System.IntPtr)">
            <summary>
            Returns the number of nodes on the BUS.
            
            Number of nodes connected to the bus according to the informations in the loaded SDF.
            </summary>
            <param name="handle">Handle representing a channel (see BLC_getChannelHandle )</param>
            <returns>
            Number of nodes connected to the bus according to the informations in the loaded SDF.
            Values &lt;0 on error.
            See standard return values for error, or for textual
            representation (for return values &lt; -1000) BLC_getLastError.
            </returns>
        </member>
        <member name="M:de.lipowsky.BLC.BabyLin.BLC_getNodeName(System.IntPtr,System.Int32)">
            <summary>
            Returns the name of a given node
            
            Name of a node connected to the bus according to the informations in the loaded SDF.
            </summary>
            <param name="handle">Handle representing a channel (see BLC_getChannelHandle )</param>
            <param name="idx">Zero based index of requested node entry (see BLC_getNodeCount )</param>
            <returns>the name of a node connected to the bus</returns>
        </member>
        <member name="M:de.lipowsky.BLC.BabyLin.BLC_getFrameCount(System.IntPtr)">
            <summary>
            Returns the number of frames of the BUS description
            
            Number of frames of the bus according to the informations in the loaded SDF.
            </summary>
            <param name="handle">Handle representing the connection; returned previously by
            BL_open().</param>
            <returns>
            Number of frames of the bus according to the informations in the loaded SDF.
            Values &lt;0 on error.
            See standard return values for error, or for textual
            representation (for return values &lt; -1000) BLC_getLastError.
            </returns>
        </member>
        <member name="M:de.lipowsky.BLC.BabyLin.BLC_getFrameName(System.IntPtr,System.Int32)">
            <summary>
            Returns the name of a given frame
            
            Name of a frame of the bus according to the informations in the loaded SDF.
            </summary>
            <param name="handle">Handle representing a channel (see BLC_getChannelHandle )</param>
            <param name="idx">Zero based index of requested frame entry (see BLC_getFrameCount )</param>
            <returns>the name of a frame of the bus</returns>
        </member>
        <member name="M:de.lipowsky.BLC.BabyLin.BLC_getSignalCount(System.IntPtr)">
            <summary>
            Returns the number of signals
            
            Number of signals of the bus according to the informations in the loaded SDF.
            </summary>
            <param name="handle">Handle representing a channel (see BLC_getChannelHandle )</param>
            <returns>
            Number of signals of the bus according to the informations in the loaded SDF.
            Values &lt;0 on error.
            See standard return values for error, or for textual
            representation (for return values &lt; -1000) BLC_getLastError.
            </returns>
        </member>
        <member name="M:de.lipowsky.BLC.BabyLin.BLC_getSignalName(System.IntPtr,System.Int32)">
            <summary>
            Returns the name of given signal
            
            Name of a signal of the bus according to the informations in the loaded SDF.
            </summary>
            <param name="handle">Handle representing a channel (see BLC_getChannelHandle )</param>
            <param name="idx">Zero based index of requested signal entry (see BLC_getSignalCount )</param>
            <returns>
            Status of operation; '=0' means successful, '!=0' otherwise.
            See standard return values for error, or for textual
            representation (for return values &lt; -1000) BLC_getLastError.
            </returns>
        </member>
        <member name="M:de.lipowsky.BLC.BabyLin.BLC_isSignalEmulated(System.IntPtr,System.Int32)">
            <summary>
            Retrieve information about wheather a signal is emulated by the BabyLIN-Device or not
            
            A signal is emulated if the node to which it belongs (according to the SDF) is emulated by the BabyLIN-Device
            (see "setnodesimu" sendCommand in babylin_commands_sdf to change node emulation at runtime )
            </summary>
            <param name="handle">Handle representing a channel (see BLC_getChannelHandle )</param>
            <param name="idx">Zero based index of requested signal entry (see BLC_getSignalCount )</param>
            <returns>
            Status of operation; '=0' means successful, '!=0' otherwise.
            See standard return values for error, or for textual
            representation (for return values &lt; -1000) BLC_getLastError.
            </returns>
        </member>
        <member name="M:de.lipowsky.BLC.BabyLin.BLC_getSignalSize(System.IntPtr,System.Int32)">
            <summary>
            Retrieve size of a signal
            
            Size of a signal of the bus according to the informations in the loaded SDF.
            </summary>
            <param name="handle">Handle representing a channel (see BLC_getChannelHandle )</param>
            <param name="idx">Zero based index of requested signal entry (see BLC_getSignalCount )</param>
            <returns>
            size of the signal in bits.
            Values &lt;0 on error.
            See standard return values for error, or for textual
            representation (for return values &lt; -1000) BLC_getLastError.
            </returns>
        </member>
        <member name="M:de.lipowsky.BLC.BabyLin.BLC_getSignalsInFrameCount(System.IntPtr,System.Int32)">
            <summary>
            Retrieve the number of signals mapped in a frame
            </summary>
            <param name="handle">Handle representing a channel (see BLC_getChannelHandle )</param>
            <param name="frameIndex">Zero based index of requested frame entry (see BLC_getFrameCount )</param>
            <returns>
            Number of signals mapped in the frame
            Values &lt;0 on error.
            See standard return values for error, or for textual
            representation (for return values &lt; -1000) BLC_getLastError.
            </returns>
        </member>
        <member name="M:de.lipowsky.BLC.BabyLin.BLC_getSignalInFrame(System.IntPtr,System.Int32,System.Int32)">
            <summary>
            Retrieve the signal number of a signal mapped in a frame
            </summary>
            <param name="handle">Handle representing a channel (see BLC_getChannelHandle )</param>
            <param name="frameIndex">Zero based index of the frame the signal is mapped to (see BLC_getFrameCount )</param>
            <param name="signalIndex">Zero based index of the signal as mapped to the frame (see BLC_getSignalsInFrameCount )</param>
            <returns>
            Zero based index of the signal in the SDF
            Values &lt;0 on error.
            See standard return values for error, or for textual
            representation (for return values &lt; -1000) BLC_getLastError.
            </returns>
        </member>
        <member name="M:de.lipowsky.BLC.BabyLin.BLC_getFrameDetails(System.IntPtr,System.Int32,System.Int32@,System.Int32@,System.Int32@,System.Int32@)">
            <summary>
            Returns some details for given frame entry.
            </summary>
            <param name="handle"></param>
            <param name="idx">Zero based index of requested frame entry (sdf number)</param>
            <param name="pbusid">Pointer to int, which gets filled with BUS ID (without parity bits on LIN-Bus )</param>
            <param name="psize">Pointer to int, which gets filled with size of frame in bytes</param>
            <param name="pnodenum">Pointer to int, which gets filled with nodeindex of publishing node for this frame</param>
            <param name="pframetype">Pointer to int, which gets filled with LIN version of this frame (LIN channel only)</param>
            <returns></returns>
        </member>
        <member name="M:de.lipowsky.BLC.BabyLin.BLC_getNodeForSignal(System.IntPtr,System.Int32)">
            <summary>
            Returns some details for given frame entry.
            </summary>
            <param name="handle">Handle representing the channel to which the signal belongs (see BLC_getChannelHandle )</param>
            <param name="signalNr">Zero based index of the signal entry (sdf number)</param>
            <returns>
            the number of the node the signal is published by.
            -1 if signal is virtual.
            Values &lt; -1 on error.
            See standard return values for error, or for textual
            representation (for return values &lt; -1000) BLC_getLastError.
            </returns>
        </member>
        <member name="M:de.lipowsky.BLC.BabyLin.BLC_getFrameNrForFrameId(System.IntPtr,System.UInt32)">
            <summary>
            Retrieve the SDF frame number for a given BUS frame-id
            </summary>
            <param name="handle">Handle representing a channel (see BLC_getChannelHandle )</param>
            <param name="frameId">the BUS frameId to get the frame number</param>
            <returns>
            Zero based index of the frame in the SDF
            Values &lt;0 on error.
            See standard return values for error, or for textual
            representation (for return values &lt; -1000) BLC_getLastError.
            </returns>
        </member>
        <member name="M:de.lipowsky.BLC.BabyLin.BLC_getFrameIdForFrameNr(System.IntPtr,System.Byte)">
            <summary>
            Retrieve the BUS frame-id for a given SDF frame
            </summary>
            <param name="handle">Handle representing a channel (see BLC_getChannelHandle )</param>
            <param name="frameNr">Zero based index of the frame (see BLC_getFrameCount )</param>
            <returns>
            BUS frameId to the given frame index
            Values &lt;0 on error.
            See standard return values for error, or for textual
            representation (for return values &lt; -1000) BLC_getLastError.
            </returns>
        </member>
        <member name="M:de.lipowsky.BLC.BabyLin.BLC_dmStart(System.IntPtr,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Not documented yet
            </summary>
            <param name="handle"></param>
            <returns></returns>
        </member>
        <member name="M:de.lipowsky.BLC.BabyLin.BLC_dmWrite(System.IntPtr,System.Byte[],System.UInt32)">
            <summary>
            Not documented yet
            </summary>
            <param name="handle"></param>
            <param name="data"></param>
            <param name="dataSize"></param>
            <returns></returns>
        </member>
        <member name="M:de.lipowsky.BLC.BabyLin.BLC_dmRead(System.IntPtr,System.Byte[]@,System.UInt32)">
            <summary>
            Not documented yet
            </summary>
            <param name="handle"></param>
            <param name="buffer"></param>
            <param name="bufferSize"></param>
            <returns></returns>
        </member>
        <member name="M:de.lipowsky.BLC.BabyLin.BLC_dmPulse(System.IntPtr,System.UInt32,System.UInt32)">
            <summary>
            Not documented yet
            </summary>
            <param name="handle"></param>
            <param name="lowtime_us"></param>
            <param name="paddingtime_us"></param>
            <returns></returns>
        </member>
        <member name="M:de.lipowsky.BLC.BabyLin.BLC_dmStop(System.IntPtr)">
            <summary>
            Not documented yet
            </summary>
            <param name="handle"></param>
            <returns></returns>
        </member>
        <member name="M:de.lipowsky.BLC.BabyLin.GetWrapperVersion">
            <summary>
            Returns a string with the version information of the .net Wrapper DLL.
            </summary>
            <returns>a version string</returns>
        </member>
        <member name="M:de.lipowsky.BLC.BabyLin.SDF_open(System.String)">
            <summary>
            loads a SDFile to memory and returns a SDF_HANDLE
            </summary>
            <param name="filename">the filename to load, can be absolute or relative to the current working directory</param>
            <returns>to the loaded SDFile or 0 on error.</returns>
        </member>
        <member name="M:de.lipowsky.BLC.BabyLin.SDF_close(System.IntPtr)">
            <summary>
            closes a SDFile opened using @SDF_open
            </summary>
            <param name="handle">the SDFile handle to close</param>
            <returns>0 on success</returns>
        </member>
        <member name="M:de.lipowsky.BLC.BabyLin.SDF_downloadToDevice(System.IntPtr,System.IntPtr,System.Int32)">
            <summary>
            download a SDFile to a BabyLIN device
            </summary>
            <param name="sdfhandle"> the SDFile from SDF_open to download</param>
            <param name="blchandle"> the BabyLIN connection handle from BLC_open to download to</param>
            <param name="mode"> see BLC_loadSDF modes</param>
            <returns>see BLC_loadSDF returncodes (0 = success).</returns>
        </member>
        <member name="M:de.lipowsky.BLC.BabyLin.SDF_downloadSectionToChannel(System.IntPtr,System.IntPtr)">
            <summary>
            download a SDFile to a BabyLIN device
            </summary>
            <param name="sectionhandle">the SDFile from SDF_open to download</param>
            <param name="blchandle">the BabyLIN connection handle from @BLC_open to download to</param>
            <returns>see BLC_loadSDF returncodes (0 = success)</returns>
        </member>
        <member name="M:de.lipowsky.BLC.BabyLin.SDF_getSectionCount(System.IntPtr)">
            <summary>
            get number of sections in SDF
            </summary>
            <param name="sdfhandle">the SDFile from SDF_open</param>
            <returns>number of sections (negative value on error)</returns>
        </member>
        <member name="M:de.lipowsky.BLC.BabyLin.SDF_getSectionHandle(System.IntPtr,System.Int32)">
            <summary>
            SDF_getSectionHandle get handle to a section of a sdf
            </summary>
            <param name="sdfhandle">the handle of the sdf to get the section handle from</param>
            <param name="sectionNr">the section number to get the handle for</param>
            <returns>see BLC_loadSDF returncodes (0 = success)</returns>
        </member>
        <member name="M:de.lipowsky.BLC.BabyLin.SDF_getSectionInfo(System.IntPtr,de.lipowsky.BLC.BabyLin.SDF_sectionInfo_t@)">
            <summary>
            SDF_getSectionInfo get information about a section
            </summary>
            <param name="sectionhandle">the section handle to retrieve informations about</param>
            <param name="sectionInfo">pointer to pre-allocated SDF_SECTIONINFO structure to fill</param>
            <returns>0 on success</returns>
        </member>
        <member name="M:de.lipowsky.BLC.BabyLin.ReturnValueToString(System.Int32)">
            <summary>
            Convert the return value to a string.
            </summary>
            <param name="value">Return value from a BabyLIN.BL_... Function. For "BL_sendCommand(handle, "status;");" use the StatusToString( ) Function!</param>
            <returns>Return value as string</returns>
        </member>
        <member name="M:de.lipowsky.BLC.BabyLin.ReturnValueToMessage(System.Int32)">
            <summary>
            Convert the return value to a readable message.
            </summary>
            <param name="value">Return value from a BabyLIN.BL_... Function. For "BL_sendCommand(handle, "status;");" use the StatusToString( ) Function!</param>
            <returns>A message matching the return value</returns>
        </member>
        <member name="M:de.lipowsky.BLC.BabyLin.StatusToString(System.Int32)">
            <summary>
            Convert the return value from "BLC_sendCommand(handle, "status;");" to a string.
            </summary>
            <param name="status">Return value from BLC_sendCommand(...,"status;")</param>
            <returns>Status as string</returns>
        </member>
        <member name="M:de.lipowsky.BLC.BabyLin.BLC_sendRaw(System.IntPtr,System.Byte[],System.UInt32@)">
            <summary>
            Send a (raw!) command to the BabyLIN device.
            
            Warning: The command must be encoded in the binary DP-Message format of BabyLIN.
            </summary>
            <param name="handle">Handle representing the connection. (see BLC_open )</param>
            <param name="command">char*-Buffer with the designated command(s).</param>
            <param name="length">length of buffer; gets set to actual sent command's length.</param>
            <returns>
            Status of operation; '=0' means successful, '!=0' otherwise.
            See standard return values for error, or for textual
            representation (for return values &lt; -1000) BLC_getLastError.
            </returns>
        </member>
        <member name="M:de.lipowsky.BLC.BabyLin.BLC_setDTLMode(System.IntPtr,System.Int32)">
            <summary>
            Set the Diagnostic Transport Layer mode.
            
            There are different Diagnostic modes, which offer different levels of protocol functionality.
            The Baby-LIN will start with Diagnostic OFF on Power Up.
            If the BabyLIN acts as LIN master then the selection of an Diagnostic Mode happens trough the usage
            of the appropriate API function calls. So the API functions BL_sendRawMasterRequest or BL_sendRawSlaveResponse
            will start  the Diagnostic RAW mode, where as the API calls BL_sendDTLRequest or BL_sendDTLResponse will start the
            Diagnostic DTL mode.
            If the BabyLIN acts as LIN slave then the DTL mode must be set by use of this function.
            It is not possible to use different Diagnostics modes at the same time !
            
            List of DTL modes:
            | Mode | Name | Description |
            |-----:|:-----|:------------|
            |0 | DTL_NONE | no DTL Support |
            |1 | DTL_RAW  | RAW Mode DTL Support |
            |2 | DTL_COOKED | Cooked Mode DTL Support |
            </summary>
            <param name="handle">Handle representing a LIN-channel (see BLC_getChannelHandle )</param>
            <param name="mode">DTL mode:
            0 = DTL_NONE = no DTL Support
            1 = DTL_RAW = RAW Mode DTL Support
            2 = DTL_COOKED = Cooked Mode DTL Support</param>
            <returns>
            Status of operation; '=0' means successful, '!=0' otherwise.
            See standard return values for error, or for textual
            representation (for return values &lt; -1000) BLC_getLastError.
            </returns>
        </member>
        <member name="M:de.lipowsky.BLC.BabyLin.BLC_sendDTLRequest(System.IntPtr,System.Byte,System.Int32,System.Byte[])">
            <summary>
            Send a DTL MasterReq to a node
            </summary>
            <param name="handle">Handle representing a LIN-channel (see BLC_getChannelHandle )</param>
            <param name="nad">NAD of the node the request gets send to.</param>
            <param name="length">Length of the following data array.</param>
            <param name="data">DTL frame data (begins with SID, followed by up to 4095 data bytes).</param>
            <returns>
            Status of operation; '=0' means successful, '!=0' otherwise.
            See standard return values for error, or for textual
            representation (for return values &lt; -1000) BLC_getLastError.
            </returns>
        </member>
        <member name="M:de.lipowsky.BLC.BabyLin.BLC_sendDTLResponse(System.IntPtr,System.Byte,System.Int32,System.Byte[])">
            <summary>
            Send a DTL SlaveResp to a node
            </summary>
            <param name="handle">Handle representing a LIN-channel (see BLC_getChannelHandle )</param>
            <param name="nad">NAD of the node the response gets send for.</param>
            <param name="length">Length of the following data array.</param>
            <param name="data">DTL frame data (begins with RSID, followed by up to 4095 data bytes).</param>
            <returns>
            Status of operation; '=0' means successful, '!=0' otherwise.
            See standard return values for error, or for textual
            representation (for return values &lt; -1000) BLC_getLastError.
            </returns>
        </member>
        <member name="M:de.lipowsky.BLC.BabyLin.BLC_sendRawSlaveResponse(System.IntPtr,System.Byte[],System.Byte[],System.Byte[],System.Int32)">
             <summary>
             Send a (non-DTL) SlaveResp upon receive of matching MasterReq.
            
             Upon the reveive of the next MasterReq frame, every bit of the request is compared to
             'reqdata' if the corresponding bit of 'reqmask' is set (1). If all match, Baby-LIN starts
             to send out the data given in 'data', 8 bytes with each SlaveResp frame.
             </summary>
             <param name="handle">Handle representing a LIN-channel (see BLC_getChannelHandle )</param>
             <param name="reqdata">Data of the expected MasterReq (exactly 8 bytes).</param>
             <param name="reqmask">Mask for 'reqdata' to indicate which bits must match (exactly 8 bytes).</param>
             <param name="data">MasterReq frame data (multiple of 8 bytes).</param>
             <param name="length">Length of data to send.</param>
             <returns>
             Status of operation; '=0' means successful, '!=0' otherwise.
             See standard return values for error, or for textual
             representation (for return values &lt; -1000) BLC_getLastError.
             </returns>
        </member>
        <member name="M:de.lipowsky.BLC.BabyLin.BLC_sendRawMasterRequest(System.IntPtr,System.Byte[],System.Int32)">
            <summary>
            Send a (non-DTL) MasterReq with the specified 8 bytes as data.
            
            The internal raw-SlaveResponse-buffer is being reset and the Baby-LIN device gets
            instructed to report the next 'count' SlaveResp-frames which in turn are accumulated
            into the SlaveResponse-buffer which can be queried by BL_getRawSlaveResponse().
            </summary>
            <param name="handle">Handle representing a LIN-channel (see BLC_getChannelHandle )</param>
            <param name="data">MasterReq frame data (exactly 8 bytes).</param>
            <param name="count">Number of expected SlaveResp frames.</param>
            <returns>
            Status of operation; '=0' means successful, '!=0' otherwise.
            See standard return values for error, or for textual
            representation (for return values &lt; -1000) BLC_getLastError.
            </returns>
        </member>
        <member name="M:de.lipowsky.BLC.BabyLin.BLC_getDTLRequestStatus(System.IntPtr)">
            <summary>
            Returns the status of the last request-send operation.
            </summary>
            <param name="handle">Handle representing a LIN-channel (see BLC_getChannelHandle )</param>
            <returns>
            Status of last request operation if >= 0; see BL_DTL_STATUS for
            values.
            See standard return values for error, or for textual
            representation (for return values &lt; -1000) BLC_getLastError.
            </returns>
        </member>
        <member name="M:de.lipowsky.BLC.BabyLin.BLC_getDTLResponseStatus(System.IntPtr)">
            <summary>
            Returns the status of the last resonse-send operation.
            </summary>
            <param name="handle">Handle representing a LIN-channel (see BLC_getChannelHandle )</param>
            <returns>
            Status of last request operation if >= 0; see BL_DTL_STATUS for
            values.
            See standard return values for error, or for textual
            representation (for return values &lt; -1000) BLC_getLastError.
            </returns>
        </member>
        <member name="M:de.lipowsky.BLC.BabyLin.BLC_getRawSlaveResponse(System.IntPtr,System.Byte[],System.Int32)">
            <summary>
            Returns the first 'count' bytes of the current SlaveResp-buffer.
            
            The internal raw-SlaveResponse-buffer is filled continuously with the data bytes of
            reported SlaveResp-frames and is being reset upon every call of BL_sendRawMasterRequest().
            </summary>
            <param name="handle">Handle representing a LIN-channel (see BLC_getChannelHandle )</param>
            <param name="data">Pointer to char array which gets filled (must hold min. 'length' bytes).</param>
            <param name="length">How many bytes should get returned.</param>
            <returns>
            Status of operation; '=0' means successful, '!=0' otherwise.
            See standard return values for error, or for textual
            representation (for return values &lt; -1000) BLC_getLastError.
            </returns>
        </member>
        <member name="M:de.lipowsky.BLC.BabyLin.BLC_lastAnswerHasData(System.IntPtr)">
            <summary>
            Returns BL_OK if the last answer to a command contained additional data.
            
            If there is no additional data present it returns BL_NO_ANSWER_DATA.
            </summary>
            <param name="handle">Handle representing a LIN-channel (see BLC_getChannelHandle )</param>
            <returns>
            Status of operation; '=0' means successful, '!=0' otherwise.
            See standard return values for error, or for textual
            representation (for return values &lt; -1000) BLC_getLastError.
            </returns>
        </member>
        <member name="M:de.lipowsky.BLC.BabyLin.BLC_getAnswerTypeByName(System.IntPtr,System.String,de.lipowsky.BLC.BabyLin.BLC_ANSWER_TYPE@,System.UInt32@)">
            <summary>
            Get type of a parameter of the last answer data from a BabyLIN
            
            If the last answer to a command contained additional data, then this function reports
            the type and size for a specific answer data set. Data set selected by name.
            The following types of data sets are possible:
                 BLC_ANSWER_TYPE_INT - 32bit integer,
                 BLC_ANSWER_TYPE_STR - zero-terminated string (variable length),
                 BLC_ANSWER_TYPE_BIN - binary data (variable length)
            </summary>
            <param name="handle">Handle representing the channel on which the answer data was received (see BLC_getChannelHandle )</param>
            <param name="name">char*-string with the name of answer data set</param>
            <param name="type">
            type of data set is returned within:
                 BLC_ANSWER_TYPE_INT - 32bit integer,
                 BLC_ANSWER_TYPE_STR - zero-terminated string (variable length),
                 BLC_ANSWER_TYPE_BIN - binary data (variable length)
            </param>
            <param name="length">length of data set is returned within</param>
            <returns>
            Status of operation; '=0' means successful, '!=0' otherwise.
            See standard return values for error, or for textual
            representation (for return values &lt; -1000) BLC_getLastError.
            </returns>
        </member>
        <member name="M:de.lipowsky.BLC.BabyLin.BLC_getAnswerNameByIndex(System.IntPtr,System.Int32)">
            <summary>
            Get name of a parameter of the last answer data from a BabyLIN
            </summary>
            <param name="handle">Handle representing the channel on which the answer data was received (see BLC_getChannelHandle )</param>
            <param name="index">zero-based index of the answer data set</param>
            <returns>
            The name of a parameter of the last answer data from a BabyLIN
            </returns>
        </member>
        <member name="M:de.lipowsky.BLC.BabyLin.BLC_getAnswerTypeByIndex(System.IntPtr,System.UInt32,de.lipowsky.BLC.BabyLin.BLC_ANSWER_TYPE@,System.UInt32@)">
            <summary>
            Get type of a parameter of the last answer data from a BabyLIN
            
            If the last answer to a command contained additional data, then this function reports
            the type and size for a specific answer data set. Data set selected by name.
            The following types of data sets are possible:
                 BLC_ANSWER_TYPE_INT - 32bit integer,
                 BLC_ANSWER_TYPE_STR - zero-terminated string (variable length),
                 BLC_ANSWER_TYPE_BIN - binary data (variable length)
            </summary>
            <param name="handle">Handle representing the channel on which the answer data was received (see BLC_getChannelHandle )</param>
            <param name="index">char*-string with the name of answer data set</param>
            <param name="type">
            type of data set is returned within:
                 BLC_ANSWER_TYPE_INT - 32bit integer,
                 BLC_ANSWER_TYPE_STR - zero-terminated string (variable length),
                 BLC_ANSWER_TYPE_BIN - binary data (variable length)
            </param>
            <param name="length">length of data set is returned within</param>
            <returns>
            Status of operation; '=0' means successful, '!=0' otherwise.
            See standard return values for error, or for textual
            representation (for return values &lt; -1000) BLC_getLastError.
            </returns>
        </member>
        <member name="M:de.lipowsky.BLC.BabyLin.BLC_getAnswerByName(System.IntPtr,System.String,System.Byte[],System.UInt32)">
            <summary>
            Get the value of a parameter of the last answer data from a BabyLIN
            
            If the last answer to a command contained additional data, then this function copies
            the answer data set over into the destination buffer. Data set selected by name.
            </summary>
            <param name="handle">Handle representing the channel on which the answer data was received (see BLC_getChannelHandle )</param>
            <param name="name">char*-string with the name of answer data set</param>
            <param name="buffer">pointer to destination buffer for the data set</param>
            <param name="length">length of destination buffer</param>
            <returns>
            Status of operation; '=0' means successful, '!=0' otherwise.
            See standard return values for error, or for textual
            representation (for return values &lt; -1000) BLC_getLastError.
            </returns>
        </member>
        <member name="M:de.lipowsky.BLC.BabyLin.BLC_getAnswerByIndex(System.IntPtr,System.UInt32,System.Byte[],System.UInt32)">
            <summary>
            Get the value of a parameter of the last answer data from a BabyLIN
            
            If the last answer to a command contained additional data, then this function copies
            the answer data set over into the destination buffer. Data set selected by index.
            </summary>
            <param name="handle">Handle representing the channel on which the answer data was received (see BLC_getChannelHandle )</param>
            <param name="index">zero-based index of the answer data set</param>
            <param name="buffer">pointer to destination buffer for the data set</param>
            <param name="length">length of destination buffer</param>
            <returns>
            Status of operation; '=0' means successful, '!=0' otherwise.
            See standard return values for error, or for textual
            representation (for return values &lt; -1000) BLC_getLastError.
            </returns>
        </member>
        <member name="M:de.lipowsky.BLC.BabyLin.BLC_sendCommand(System.IntPtr,System.String)">
            <summary>
            Send a command to the BabyLIN device.
            
            The command must match the command syntax as specified in the BabyLIN
            documentation (see babylin_commands). The trailing ';' may be omitted; you may specify
            several commands at once! LIKE "start; disframe 0 1; stop"
            </summary>
            <param name="handle">Handle representing the channel to send the command to (see BLC_getChannelHandle )</param>
            <param name="command">C-string with the command (i.e. "status;")</param>
            <returns>
            Status of operation; '=0' means successful, '!=0' otherwise.
            See standard return values for error, or for textual
            representation (for return values &lt; -1000) BLC_getLastError.
            </returns>
        </member>
        <member name="M:de.lipowsky.BLC.BabyLin.BLC_setsig(System.IntPtr,System.Int32,System.UInt64)">
            <summary>
            Shorthand for "setsig" command (see babylin_commands)
            </summary>
            <param name="handle">Handle representing the channel to send the command to (see BLC_getChannelHandle )</param>
            <param name="signalNr">the signal to set the value</param>
            <param name="value">the value to assign to the signal</param>
            <returns>
            Status of operation; '=0' means successful, '!=0' otherwise.
            See standard return values for error, or for textual
            representation (for return values &lt; -1000) BLC_getLastError.
            </returns>
        </member>
        <member name="M:de.lipowsky.BLC.BabyLin.BLC_mon_set(System.IntPtr,System.Int32,System.Int32[],System.Int32)">
            <summary>
            Shorthand for "mon_set" command (see babylin_commands)
            </summary>
            <param name="handle">Handle representing the channel to send the command to (see BLC_getChannelHandle )</param>
            <param name="frameid">the BUS-frame-id to set the framedata for</param>
            <param name="databytes">array of databytes to use as the framedata</param>
            <param name="len">the length of the data</param>
            <returns>
            Status of operation; '=0' means successful, '!=0' otherwise.
            See standard return values for error, or for textual
            representation (for return values &lt; -1000) BLC_getLastError.
            </returns>
        </member>
        <member name="M:de.lipowsky.BLC.BabyLin.BLC_mon_xmit(System.IntPtr,System.Int32,System.Int32)">
            <summary>
            Shorthand for "mon_xmit" command (see babylin_commands)
            </summary>
            <param name="handle">Handle representing the channel to send the command to (see BLC_getChannelHandle )</param>
            <param name="frameid">he BUS-frame-id to transmit</param>
            <param name="slottime">Slottime = 0 equals a single transmit, slottime > 0 equals cyclic transmission of frame</param>
            <returns>
            Status of operation; '=0' means successful, '!=0' otherwise.
            See standard return values for error, or for textual
            representation (for return values &lt; -1000) BLC_getLastError.
            </returns>
        </member>
        <member name="M:de.lipowsky.BLC.BabyLin.BLC_mon_set_xmit(System.IntPtr,System.Int32,System.Int32[],System.Int32,System.Int32)">
            <summary>
            Shorthand for "mon_set" followed by "mon_xmit" command (see babylin_commands)
            </summary>
            <param name="handle">Handle representing the channel to send the command to (see BLC_getChannelHandle )</param>
            <param name="frameid">the BUS-frame-id to set and transmit</param>
            <param name="databytes">array of databytes to use as the framedata</param>
            <param name="len">the length of the data</param>
            <param name="slottime">slottime = 0 equals a single transmit, slottime > 0 equals cyclic transmission of frame</param>
            <returns>
            Status of operation; '=0' means successful, '!=0' otherwise.
            See standard return values for error, or for textual
            representation (for return values &lt; -1000) BLC_getLastError.
            </returns>
        </member>
        <member name="M:de.lipowsky.BLC.BabyLin.BLC_registerFrameCallback(System.IntPtr,de.lipowsky.BLC.BabyLin.CallBackFrameDelegate)">
            <summary>
            Registers a callback function, which is called on every reception of a (monitored) frame.
            
            Issuing a NULL-pointer de-registers the callback function. As the function is called
            from another thread context, take care of thread-safety (i.e. using mutexes, etc.).
            </summary>
            <param name="handle">Handle representing the channel id which the frame occurred</param>
            <param name="pCallback">Pointer to a function call-compatible to  BLC_frame_callback_func.</param>
            <returns>
            Status of operation; '=0' means successful, '!=0' otherwise.
            See standard return values for error, or for textual
            representation (for return values &lt; -1000) BLC_getLastError.
            </returns>
        </member>
        <member name="M:de.lipowsky.BLC.BabyLin.BLC_registerJumboFrameCallback(System.IntPtr,de.lipowsky.BLC.BabyLin.CallBackJumboFrameDelegate)">
            <summary>
            Registers a callback function, which is called on every reception of a (monitored) jumbo frame.
            
            Issuing a NULL-pointer de-registers the callback function. As the function is called
            from another thread context, take care of thread-safety (i.e. using mutexes, etc.).
            </summary>
            <param name="handle">Handle representing the channel id which the frame occurred</param>
            <param name="pCallback">Pointer to a function call-compatible to  BLC_jumboframe_callback_func.</param>
            <returns>
            Status of operation; '=0' means successful, '!=0' otherwise.
            See standard return values for error, or for textual
            representation (for return values &lt; -1000) BLC_getLastError.
            </returns>
        </member>
        <member name="M:de.lipowsky.BLC.BabyLin.BLC_registerSignalCallback(System.IntPtr,de.lipowsky.BLC.BabyLin.CallBackSignalDelegate)">
            <summary>
            Registers a callback function, which is called on every reception of a (monitored) signal.
            
            Issuing a NULL-pointer de-registers the callback function. As the function is called
            from another thread context, take care of thread-safety (i.e. using mutexes, etc.).
            </summary>
            <param name="handle">Handle representing the channel on which the signal occurred;</param>
            <param name="pCallback">Pointer to a function call-compatible to BLC_signal_callback_func.</param>
            <returns>
            Status of operation; '=0' means successful, '!=0' otherwise.
            See standard return values for error, or for textual
            representation (for return values &lt; -1000) BLC_getLastError.
            </returns>
        </member>
        <member name="M:de.lipowsky.BLC.BabyLin.BLC_registerErrorCallback(System.IntPtr,de.lipowsky.BLC.BabyLin.CallBackErrorDelegate)">
            <summary>
            Registers a callback function, which is called on every reception of an error message.
            
            Issuing a NULL-pointer de-registers the callback function. As the function is called
            from another thread context, take care of thread-safety (i.e. using mutexes, etc.).
            </summary>
            <param name="handle">Handle representing the channel emitting the error; returned previously by</param>
            <param name="pCallback">Pointer to a function call-compatible to BLC_error_callback_func.</param>
            <returns>
            Status of operation; '=0' means successful, '!=0' otherwise.
            See standard return values for error, or for textual
            representation (for return values &lt; -1000) BLC_getLastError.
            </returns>
        </member>
        <member name="M:de.lipowsky.BLC.BabyLin.BLC_registerDebugCallback(System.IntPtr,de.lipowsky.BLC.BabyLin.CallBackDebugDelegate)">
            <summary>
            Registers a callback function, which is called whenever a debug message from a BabyLIN-Device is received.
            
            Issuing a NULL-pointer de-registers the callback function. As the function is called
            from another thread context, take care of thread-safety (i.e. using mutexes, etc.).
            </summary>
            <param name="handle">Handle representing the channel emitting the error; returned previously by</param>
            <param name="pCallback">Pointer to a function call-compatible to BLC_debug_callback_func.</param>
            <returns>
            Status of operation; '=0' means successful, '!=0' otherwise.
            See standard return values for error, or for textual
            representation (for return values &lt; -1000) BLC_getLastError.
            </returns>
        </member>
        <member name="M:de.lipowsky.BLC.BabyLin.BLC_registerMacroStateCallback(System.IntPtr,de.lipowsky.BLC.BabyLin.CallBackMacroStateDelegate)">
            <summary>
            Registers a callback function, which is called whenever the execution state of a macro changes.
            
            Issuing a NULL-pointer de-registers the callback function. As the function is called
            from another thread context, take care of thread-safety (i.e. using mutexes, etc.).
            </summary>
            <param name="handle">Handle representing the channel emitting the error; returned previously by</param>
            <param name="pCallback">Pointer to a function call-compatible to BLC_macrostate_callback_func.</param>
            <returns>
            Status of operation; '=0' means successful, '!=0' otherwise.
            See standard return values for error, or for textual
            representation (for return values &lt; -1000) BLC_getLastError.
            </returns>
        </member>
        <member name="M:de.lipowsky.BLC.BabyLin.BLC_registerDTLRequestCallback(System.IntPtr,de.lipowsky.BLC.BabyLin.CallBackDTLDelegate)">
            <summary>
            Registers a callback function, which is called whenever dtl response is received.
            
            Issuing a NULL-pointer de-registers the callback function. As the function is called
            from another thread context, take care of thread-safety (i.e. using mutexes, etc.).
            </summary>
            <param name="handle">Handle representing the channel emitting the error; returned previously by</param>
            <param name="pCallback">Pointer to a function call-compatible to BLC_dtl_request_callback_func.</param>
            <returns>
            Status of operation; '=0' means successful, '!=0' otherwise.
            See standard return values for error, or for textual
            representation (for return values &lt; -1000) BLC_getLastError.
            </returns>
        </member>
        <member name="M:de.lipowsky.BLC.BabyLin.BLC_registerDTLResponseCallback(System.IntPtr,de.lipowsky.BLC.BabyLin.CallBackDTLDelegate)">
            <summary>
            Registers a callback function, which is called on every reception of a DTL response, but only if BabyLIN emulates the master node.
            Issuing a NULL-pointer de-registers the callback function. As the function is called
            from another thread context, take care of thread-safety (i.e. using mutexes, etc.).
            </summary>
            <param name="handle">Handle representing the connection; returned previously by BL_open().</param>
            <param name="pCallback">Reference to a function call-compatible to CallBackDTLDelegate.</param>
            <returns>
            Status of operation; '=0' means successful, '!=0' otherwise.
            See standard return values for error, or for textual
            representation (for return values &lt; -1000)  BL_getLastError().
            </returns>
        </member>
        <member name="T:de.lipowsky.BLC.BabyLin.BLC_signal_t">
            <summary>
            Carries information about one signal.
            </summary>
        </member>
        <member name="F:de.lipowsky.BLC.BabyLin.BLC_signal_t.index">
            <summary>
            Index number of signal; see the SDF for the adequate number
            </summary>
        </member>
        <member name="F:de.lipowsky.BLC.BabyLin.BLC_signal_t.isArray">
            <summary>
            Defines wether this signal is a normal, value-based one (0) or LIN2.0 array signal (1).
            </summary>
        </member>
        <member name="F:de.lipowsky.BLC.BabyLin.BLC_signal_t.value">
            <summary>
            Value of the signal.
            </summary>
        </member>
        <member name="F:de.lipowsky.BLC.BabyLin.BLC_signal_t.arrayLength">
            <summary>
            Length of the array.
            </summary>
        </member>
        <member name="F:de.lipowsky.BLC.BabyLin.BLC_signal_t.arrayData">
            <summary>
            Value(s) of the signal, if isArray == 1.
            </summary>
        </member>
        <member name="F:de.lipowsky.BLC.BabyLin.BLC_signal_t.timestamp">
            <summary>
            Global time index of frame transmission start (in µsec).
            </summary>
        </member>
        <member name="F:de.lipowsky.BLC.BabyLin.BLC_signal_t.chId">
            <summary>
            Current Channelid
            </summary>
        </member>
        <member name="M:de.lipowsky.BLC.BabyLin.BLC_signal_t.ToString">
            <summary>
            Readable string representation
            </summary>
        </member>
        <member name="T:de.lipowsky.BLC.BabyLin.BLC_targetid_t">
            <summary>
            The structure holds information about a connected BabyLIN device
            retreive informations using BLC_getTargetID or request by using BLC_sendCommand with command "targetid"
            </summary>
        </member>
        <member name="F:de.lipowsky.BLC.BabyLin.BLC_targetid_t.type">
            <summary>
            Type of the hardware
            
            | Value | Device |
            |------:|--------|
            |0x100  |Baby-LIN|
            |0x101  |Baby-LIN-PLUS|
            |0x102  |Baby-LIN-RC|
            |0x103  |Baby-LIN-KS01|
            |0x200  |Baby-LIN-RM|
            |0x300  |HARP|
            |0x400  |Baby-LIN-RC-PLUS|
            |0x500  |Baby-LIN-RMII|
            |0x502  |HARP-4|
            </summary>
        </member>
        <member name="F:de.lipowsky.BLC.BabyLin.BLC_targetid_t.version">
            <summary>
            Firmware version of the device
            </summary>
        </member>
        <member name="F:de.lipowsky.BLC.BabyLin.BLC_targetid_t.build">
            <summary>
            Firmware build number
            </summary>
        </member>
        <member name="F:de.lipowsky.BLC.BabyLin.BLC_targetid_t.flags">
            <summary>
            Software related flags
            
            |Value|Description|
            |----:|:----------|
            |0x01 |Testversion|
            </summary>
        </member>
        <member name="F:de.lipowsky.BLC.BabyLin.BLC_targetid_t.serial">
            <summary>
            Device's serial number
            </summary>
        </member>
        <member name="F:de.lipowsky.BLC.BabyLin.BLC_targetid_t.heapsize">
            <summary>
            Remaining heap size on device (memory available for SDF dowload)
            </summary>
        </member>
        <member name="F:de.lipowsky.BLC.BabyLin.BLC_targetid_t.numofchannels">
            <summary>
            number of channels
            </summary>
        </member>
        <member name="F:de.lipowsky.BLC.BabyLin.BLC_targetid_t.name">
            <summary>
            Textual name of the device (zero-terminated C-string)
            </summary>
        </member>
        <member name="T:de.lipowsky.BLC.BabyLin.BLC_error_t">
            <summary>
            Represents a LIN error message
            </summary>
        </member>
        <member name="F:de.lipowsky.BLC.BabyLin.BLC_error_t.timestamp">
            <summary>
            Time of occurence.
            The timestamp when the error occurred.
            device-timstamp in us if error type is a device error (1-13)
            pc timestamp in ms if error type is dll error (65535)
            </summary>
        </member>
        <member name="F:de.lipowsky.BLC.BabyLin.BLC_error_t.type">
            <summary>
            Error type
            
            | Value | Name | Description | Status |
            |------:|:-----|:------------|:-------|
            |1|ERRTYPE_ID|Parity error in ID| |
            |2|ERRTYPE_DATA|Read data from BUS does not match send data| Frame-ID |
            |3|ERRTYPE_FRAMING|Framing error in data reception|Frame-ID|
            |4|ERRTYPE_CHECKSUM|Checksum failed|Frame-ID|
            |5|ERRTYPE_DATATO|Data timed out (incomplete msg reception)|Frame-ID|
            |6|ERRTYPE_SEQ|Unexpected state sequencing|internal status|
            |8|ERRTYPE_MACRO|Error in macro execution|internal status|
            |9|ERRTYPE_BUSBUSY|Bus is already used|internal status|
            |10|ERRTYPE_BUSOFF|Bus is offline (no bus power) |internal status|
            |11|ERRTYPE_BUSSPEED_DIFFERS|Actual bus-speed differs from LDF bus speed (Warning) |actual speed|
            |12|ERRTYPE_KWP_ERROR|Error in KWP|KWP error code|
            |13|ERRTYPE_APPLICATION|Application error|unused|
            |14|ERRTYPE_RESP_LOST|Response send buffer overflow occured|unused|
            |15|ERRTYPE_CAN_NOERR|CAN error disappeared|unused|
            |16|ERRTYPE_CAN|CAN error| bitmap 0x01 noAck \n bitmap 0x02 stuffing error \n bitmap 0x04 framing error \n bitmap 0x08 recessive bit error \n bitmap 0x10 dominant bit error \n bitmap 0x20 checksum error|
            |65535|ERRTYPE_DLL_ERROR|Error in DLL occurred|dll status code|
            </summary>
        </member>
        <member name="F:de.lipowsky.BLC.BabyLin.BLC_error_t.status">
            <summary>
            Additional error information
            
            Depends on type descriptions.
            for "dll status code":
            |status|description|
            |-----:|:----------|
            |1|Lost connection to device|
            </summary>
        </member>
        <member name="M:de.lipowsky.BLC.BabyLin.BLC_error_t.ToString">
            <summary>
            Readable string representation
            </summary>
        </member>
        <member name="T:de.lipowsky.BLC.BabyLin.BLC_jumboframe_t">
            <summary>
            Carries information about one frame, is used as API interface
            </summary>
        </member>
        <member name="F:de.lipowsky.BLC.BabyLin.BLC_jumboframe_t.chId">
            <summary>
            Id of the channel within the device
            </summary>
        </member>
        <member name="F:de.lipowsky.BLC.BabyLin.BLC_jumboframe_t.timestamp">
            <summary>
            Global time index of frame transmission start (in us). Received from target, represents the time since the Target was powered on.
            </summary>
        </member>
        <member name="F:de.lipowsky.BLC.BabyLin.BLC_jumboframe_t.intime">
            <summary>
            Timestamp with pc time, used to calculate age of framedata, to allow timeout functions
            </summary>
        </member>
        <member name="F:de.lipowsky.BLC.BabyLin.BLC_jumboframe_t.frameId">
            <summary>
            FrameID of Frame ( as appeared on the BUS. On LIN BUS without parity bits )
            </summary>
        </member>
        <member name="F:de.lipowsky.BLC.BabyLin.BLC_jumboframe_t.lenOfData">
            <summary>
            Length of frameData
            </summary>
        </member>
        <member name="F:de.lipowsky.BLC.BabyLin.BLC_jumboframe_t.frameData">
            <summary>
            Databytes of the frame
            </summary>
        </member>
        <member name="F:de.lipowsky.BLC.BabyLin.BLC_jumboframe_t.frameFlags">
            <summary>
            Additional, informational frame flags
            
            Used as a bitfield, multiple flags possible
            | Value | Description |
            |------:|:------------|
            |0x01   |Frame has error|
            |0x02   |Frame is selfsent (sent by the BabyLIN-Device, because it simulates the corresponding node)|
            |0x04   |Timebase, if set, the unit of timestamp is ms, otherwise us|
            </summary>
        </member>
        <member name="F:de.lipowsky.BLC.BabyLin.BLC_jumboframe_t.busFlags">
            <summary>
            Bus specific flags
            
            for LIN-BUS:
            Used as a bitfield, multiple flags possible
            | Value | Description |
            |------:|:------------|
            | 0x01  |Valid CLASSIC checksum (V1)|
            | 0x02  |Valid EXTENDED checksum (V2)|
            | 0x04  |incomplete frame without checksum, not an error|
            | 0x08  |Errorframe (f.ex: no data)|
            | 0x10  |Frame is slaveresponse to a master request. If set, the upper 3 bits of flags denote a master request id|
            | 0x20  |Event triggered frame ( only if 0x10 is not set )|
            </summary>
        </member>
        <member name="F:de.lipowsky.BLC.BabyLin.BLC_jumboframe_t.checksum">
            <summary>
            checksum of the frame
            stores a checksum V1 or V2 ( refer to busFlags which checksum type applies )
            </summary>
        </member>
        <member name="T:de.lipowsky.BLC.BabyLin.BLC_frame_t">
            <summary>
            Carries information about one frame, is used as API interface
            </summary>
        </member>
        <member name="F:de.lipowsky.BLC.BabyLin.BLC_frame_t.chId">
            <summary>
            Id of the channel within the device
            </summary>
        </member>
        <member name="F:de.lipowsky.BLC.BabyLin.BLC_frame_t.timestamp">
            <summary>
            Global time index of frame transmission start (in us). Received from target, represents the time since the Target was powered on.
            </summary>
        </member>
        <member name="F:de.lipowsky.BLC.BabyLin.BLC_frame_t.intime">
            <summary>
            Timestamp with pc time, used to calculate age of framedata, to allow timeout functions
            </summary>
        </member>
        <member name="F:de.lipowsky.BLC.BabyLin.BLC_frame_t.frameId">
            <summary>
            FrameID of Frame ( as appeared on the BUS. On LIN BUS without parity bits )
            </summary>
        </member>
        <member name="F:de.lipowsky.BLC.BabyLin.BLC_frame_t.lenOfData">
            <summary>
            Length of frameData
            </summary>
        </member>
        <member name="F:de.lipowsky.BLC.BabyLin.BLC_frame_t.frameData">
            <summary>
            Databytes of the frame
            </summary>
        </member>
        <member name="F:de.lipowsky.BLC.BabyLin.BLC_frame_t.frameFlags">
            <summary>
            Additional, informational frame flags
            
            Used as a bitfield, multiple flags possible
            | Value | Description |
            |------:|:------------|
            |0x01   |Frame has error|
            |0x02   |Frame is selfsent (sent by the BabyLIN-Device, because it simulates the corresponding node)|
            |0x04   |Timebase, if set, the unit of timestamp is ms, otherwise us|
            </summary>
        </member>
        <member name="F:de.lipowsky.BLC.BabyLin.BLC_frame_t.busFlags">
            <summary>
            Bus specific flags
            
            for LIN-BUS:
            Used as a bitfield, multiple flags possible
            | Value | Description |
            |------:|:------------|
            | 0x01  |Valid CLASSIC checksum (V1)|
            | 0x02  |Valid EXTENDED checksum (V2)|
            | 0x04  |incomplete frame without checksum, not an error|
            | 0x08  |Errorframe (f.ex: no data)|
            | 0x10  |Frame is slaveresponse to a master request. If set, the upper 3 bits of flags denote a master request id|
            | 0x20  |Event triggered frame ( only if 0x10 is not set )|
            </summary>
        </member>
        <member name="F:de.lipowsky.BLC.BabyLin.BLC_frame_t.checksum">
            <summary>
            checksum of the frame
            stores a checksum V1 or V2 ( refer to busFlags which checksum type applies )
            </summary>
        </member>
        <member name="T:de.lipowsky.BLC.BabyLin.BLC_dtl_t">
            <summary>
            Carries information about DTL protocol (both requests and responses).
            </summary>
        </member>
        <member name="F:de.lipowsky.BLC.BabyLin.BLC_dtl_t.status">
            <summary>
            Status of protocol frame
            </summary>
        </member>
        <member name="F:de.lipowsky.BLC.BabyLin.BLC_dtl_t.nad">
            <summary>
            NAD of protocol frame
            </summary>
        </member>
        <member name="F:de.lipowsky.BLC.BabyLin.BLC_dtl_t.length">
            <summary>
            Length of the data-array.
            </summary>
        </member>
        <member name="F:de.lipowsky.BLC.BabyLin.BLC_dtl_t.data">
            <summary>
            frame data, beginning with the (R)SID.
            </summary>
        </member>
        <member name="T:de.lipowsky.BLC.BabyLin.BLC_macrostate_t">
            <summary>
            Information about a macro, used as parameter of a callback function registered by BLC_registerMacroStateCallback
            </summary>
        </member>
        <member name="F:de.lipowsky.BLC.BabyLin.BLC_macrostate_t.channelid">
            <summary>
            channel number this information belongs to
            </summary>
        </member>
        <member name="F:de.lipowsky.BLC.BabyLin.BLC_macrostate_t.macronr">
            <summary>
            macro-number the information is about
            </summary>
        </member>
        <member name="F:de.lipowsky.BLC.BabyLin.BLC_macrostate_t.cmdnr">
            <summary>
            the macro command number currently executed
            denotes the command-number in the macro macronr which is currently executed
            valid if state denotes a running macro
            </summary>
        </member>
        <member name="F:de.lipowsky.BLC.BabyLin.BLC_macrostate_t.state">
            <summary>
            state of the macro execution
            
            |Value|Description|
            |----:|:----------|
            |0x00 |Macro execution ended|
            |0x01 |Macro execution started|
            |0x02 |Macro execution running|
            |0x03 |Macro execution error|
            </summary>
        </member>
        <member name="F:de.lipowsky.BLC.BabyLin.BLC_macrostate_t.timestamp">
            <summary>
            timestamp of the macro state
            </summary>
        </member>
        <member name="T:de.lipowsky.BLC.BabyLin.BLC_portInfo_t">
            <summary>
            The structure holds information about a BabyLIN device connected to the PC
            Use BLC_getBabyLinPorts to retrieve a list of connected BabyLIN-Devices
            </summary>
        </member>
        <member name="F:de.lipowsky.BLC.BabyLin.BLC_portInfo_t.portNr">
            <summary>
            The COM-port number the device is connected to (windows only), use this value for BLC_open
            </summary>
        </member>
        <member name="F:de.lipowsky.BLC.BabyLin.BLC_portInfo_t.type">
            <summary>
            The type of interface of the connected device (0=USBSerial, 1=Network, 2=USB)
            </summary>
        </member>
        <member name="F:de.lipowsky.BLC.BabyLin.BLC_portInfo_t.name">
            <summary>
            The name of the connected device (f.ex. BabyLIN RM-II)
            </summary>
        </member>
        <member name="F:de.lipowsky.BLC.BabyLin.BLC_portInfo_t.device">
            <summary>
            The linux device file the BabyLIN is connected to (linux only)
            </summary>
        </member>
        <member name="T:de.lipowsky.BLC.BabyLin.BLC_channelInfo_t">
            <summary>
            Return data of the command 'BLC_getChannelInfo' providing information about a channel (BUS-type, speed etc.)
            </summary>
        </member>
        <member name="F:de.lipowsky.BLC.BabyLin.BLC_channelInfo_t.id">
            <summary>
            Channel-id(i.e. 0 = device channel)
            </summary>
        </member>
        <member name="F:de.lipowsky.BLC.BabyLin.BLC_channelInfo_t.type">
            <summary>
            Channel-Type(i.e. 0 = LIN, 1 = CAN, 99 = DEVICE)
            </summary>
        </member>
        <member name="F:de.lipowsky.BLC.BabyLin.BLC_channelInfo_t.name">
            <summary>
            Textual name of the Channel (zero-terminated C-string)
            </summary>
        </member>
        <member name="F:de.lipowsky.BLC.BabyLin.BLC_channelInfo_t.maxBaudrate">
            <summary>
            Maximum Baudrate of Channel
            </summary>
        </member>
        <member name="F:de.lipowsky.BLC.BabyLin.BLC_channelInfo_t.reserved1">
            <summary>
            Reserved value (ignore for now)
            </summary>
        </member>
        <member name="F:de.lipowsky.BLC.BabyLin.BLC_channelInfo_t.reserved2">
            <summary>
            Reserved value (ignore for now)
            </summary>
        </member>
        <member name="F:de.lipowsky.BLC.BabyLin.BLC_channelInfo_t.reserved3">
            <summary>
            Reserved value (ignore for now)
            </summary>
        </member>
        <member name="F:de.lipowsky.BLC.BabyLin.BLC_channelInfo_t.associatedWithSectionNr">
            <summary>
            the number of the section of the loaded sdf associated with this channel
            >= 0 means valid section number, -1: no mapping or no sdf loaded
            </summary>
        </member>
        <member name="T:de.lipowsky.BLC.BabyLin.BLC_sdfInfo_t">
            <summary>
            Return data of the command BLC_getSDFInfo
            </summary>
        </member>
        <member name="F:de.lipowsky.BLC.BabyLin.BLC_sdfInfo_t.name">
            <summary>
            Filename of the loaded sdf
            </summary>
        </member>
        <member name="F:de.lipowsky.BLC.BabyLin.BLC_sdfInfo_t.sectionCount">
            <summary>
            number of sections in the SDF. A file consists of at least one Section (LIN, CAN or DEVICE)
            </summary>
        </member>
        <member name="F:de.lipowsky.BLC.BabyLin.BLC_sdfInfo_t.version_major">
            <summary>
            The major SDF version
            </summary>
        </member>
        <member name="F:de.lipowsky.BLC.BabyLin.BLC_sdfInfo_t.version_minor">
            <summary>
            The minor SDF version
            </summary>
        </member>
        <member name="T:de.lipowsky.BLC.BabyLin.BLC_sectionInfo_t">
            <summary>
            Return data of the command BLC_getSectionInfo
            </summary>
        </member>
        <member name="F:de.lipowsky.BLC.BabyLin.BLC_sectionInfo_t.name">
            <summary>
            Textual name of the Section (zero-terminated C-string) as defined using SessionConf
            </summary>
        </member>
        <member name="F:de.lipowsky.BLC.BabyLin.BLC_sectionInfo_t.type">
            <summary>
            Channel-Type(i.e. 0 = LIN, 1 = CAN, 99 = DEVICE)
            </summary>
        </member>
        <member name="F:de.lipowsky.BLC.BabyLin.BLC_sectionInfo_t.nr">
            <summary>
            Number of the section within the SDF ( zero-based index )
            </summary>
        </member>
        <member name="T:de.lipowsky.BLC.BabyLin.SDF_sectionInfo_t">
            <summary>
            Represents a connection to a BabyLIN-device (for old BabyLINs) or one of the channels on new BabyLIN-devices
            </summary>
        </member>
        <member name="F:de.lipowsky.BLC.BabyLin.SDF_sectionInfo_t.sectionNr">
            <summary>
            
            </summary>
        </member>
        <member name="F:de.lipowsky.BLC.BabyLin.SDF_sectionInfo_t.type">
            <summary>
            Sectiontype (i.e. 0 = LIN, 1 = CAN, 99 = DEVICE)
            </summary>
        </member>
        <member name="F:de.lipowsky.BLC.BabyLin.SDF_sectionInfo_t.name">
            <summary>
            
            </summary>
        </member>
        <member name="F:de.lipowsky.BLC.BabyLin.SDF_sectionInfo_t.description">
            <summary>
            
            </summary>
        </member>
        <member name="T:de.lipowsky.BLC.BabyLin.BLC_DTL_STATUS">
            <summary>
            Status of DTL protocol frame
            </summary>
        </member>
        <member name="F:de.lipowsky.BLC.BabyLin.BLC_DTL_STATUS.LD_COMPLETED">
            <summary>
            Completed
            </summary>
        </member>
        <member name="F:de.lipowsky.BLC.BabyLin.BLC_DTL_STATUS.LD_FAILED">
            <summary>
            Failed
            </summary>
        </member>
        <member name="F:de.lipowsky.BLC.BabyLin.BLC_DTL_STATUS.LD_IN_PROGRESS">
            <summary>
            In progress
            </summary>
        </member>
        <member name="T:de.lipowsky.BLC.BabyLin.BLC_ANSWER_TYPE">
            <summary>
            Type of answer returned by BLC_getAnswerTypeByName() and BLC_getAnswerTypeByIndex()
            </summary>
        </member>
        <member name="F:de.lipowsky.BLC.BabyLin.BLC_ANSWER_TYPE.BLC_ANSWER_TYPE_INT">
            <summary>
            32bit integer
            </summary>
        </member>
        <member name="F:de.lipowsky.BLC.BabyLin.BLC_ANSWER_TYPE.BLC_ANSWER_TYPE_STR">
            <summary>
            zero-terminated string (variable length)
            </summary>
        </member>
        <member name="F:de.lipowsky.BLC.BabyLin.BLC_ANSWER_TYPE.BLC_ANSWER_TYPE_BIN">
            <summary>
            binary data (variable length)
            </summary>
        </member>
        <member name="T:de.lipowsky.BLC.BabyLin.CallBackFrameDelegate">
            <summary>
            callback function header whenever a frame report is received from a BabyLIN device
            </summary>
            <param name="handle">The channel where the event occured</param>
            <param name="frame">A frame</param>
        </member>
        <member name="T:de.lipowsky.BLC.BabyLin.CallBackJumboFrameDelegate">
            <summary>
            callback function header whenever a frame report is received from a BabyLIN device
            </summary>
            <param name="handle">The channel where the event occured</param>
            <param name="frame">A frame</param>
        </member>
        <member name="T:de.lipowsky.BLC.BabyLin.CallBackSignalDelegate">
            <summary>
            callback function header whenever a signal report is received from a babylin device
            </summary>
            <param name="handle">The channel where the event occured</param>
            <param name="signal">a signal</param>
        </member>
        <member name="T:de.lipowsky.BLC.BabyLin.CallBackMacroStateDelegate">
            <summary>
            callback function header whenever a macrostate is recived from a BabyLIN device
            </summary>
            <param name="handle">The channel where the event occured</param>
            <param name="macrostate">a macrostate</param>
        </member>
        <member name="T:de.lipowsky.BLC.BabyLin.CallBackErrorDelegate">
            <summary>
            callback function header whenever a buserror report is received from a BabyLIN device
            </summary>
            <param name="handle">The channel where the event occured</param>
            <param name="error">An error</param>
        </member>
        <member name="T:de.lipowsky.BLC.BabyLin.CallBackDebugDelegate">
            <summary>
            callback function header whenever a debug message is received from a BabyLIN device
            </summary>
            <param name="handle">The channel where the event occured</param>
            <param name="data">A debug string</param>
        </member>
        <member name="T:de.lipowsky.BLC.BabyLin.CallBackDTLDelegate">
            <summary>
            callback function header whenever a dtl request is received from a BabyLIN device
            </summary>
            <param name="handle">The channel where the event occured</param>
            <param name="dtl">A DTL request or response</param>
        </member>
        <member name="T:de.lipowsky.LIN.Devices.Common.InterfaceType">
            <summary>
            The used BabyLIN interface.
            </summary>
        </member>
        <member name="F:de.lipowsky.LIN.Devices.Common.InterfaceType.BL">
            <summary>
            The old BL interface. Namespace: de.lipowsky.LIN.Devices
            </summary>
        </member>
        <member name="F:de.lipowsky.LIN.Devices.Common.InterfaceType.BLC">
            <summary>
            The new BLC interface. Namespace: de.lipowsky.BLC
            </summary>
        </member>
        <member name="F:de.lipowsky.LIN.Devices.Common.InterfaceType.SDF">
            <summary>
            The new interface to access SDF data. Namespace: de.lipowsky.SDF
            </summary>
        </member>
        <member name="T:de.lipowsky.BabyLIN.BabyLinException">
            <summary>
            This is an exception that occurrs when a function returns an error.
            Exceptions will only be thrown, if you activate them by setting EnableExceptions to true.
            </summary>
        </member>
        <member name="M:de.lipowsky.BabyLIN.BabyLinException.ToString">
            <summary>
            Returns the details of the exception.
            </summary>
            <returns>A string that contains the details of the exception</returns>
        </member>
        <member name="P:de.lipowsky.BabyLIN.BabyLinException.EnableExceptions">
            <summary>
            Exceptions will only be thrown if this boolean is set to true
            </summary>
        </member>
        <member name="P:de.lipowsky.BabyLIN.BabyLinException.ReturnCode">
            <summary>
            The return code returned by the DLL function.
            </summary>
        </member>
        <member name="P:de.lipowsky.BabyLIN.BabyLinException.InterfaceType">
            <summary>
            The interface type used.
            </summary>
        </member>
        <member name="P:de.lipowsky.BabyLIN.BabyLinException.MethodName">
            <summary>
            The name of the method, that has thrown the exception.
            </summary>
        </member>
        <member name="P:de.lipowsky.BabyLIN.BabyLinException.IsSpecialErrorCode">
            <summary>
            This flag tells you, whether the return code has special error codes or if it supports the default error codes.
            </summary>
        </member>
    </members>
</doc>
